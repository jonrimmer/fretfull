{"version":3,"sources":["Fret.js","GuitarString.js","music.js","util.js","Fretboard.js","Note.js","App.js","serviceWorker.js","index.js"],"names":["src_Fret","_ref","num","dots","style","react_default","a","createElement","Fragment","className","gridArea","concat","GuitarString","includeInQuiz","rootNote","count","onToggle","width","Math","max","round","key","onClick","letter","height","borderBottom","LETTER_TO_NUM","C","C#","Db","D","D#","Eb","E","F","F#","Gb","G","G#","Ab","A","A#","Bb","B","NUM_TO_LETTER","Note","octave","Object","classCallCheck","this","parseSpn","spn","length","parseInt","addSemitones","note","semitones","Tuning","name","notes","map","TUNINGS","getRandomInt","floor","random","tmap","arr","callback","l","item","i","first","last","headSize","posToGrid","string","fret","src_Fretboard","_ref3","children","frets","tuning","gridTemplateColumns","f","size","join","gridColumns","gridTemplateRows","_note","_ref2","gridRows","assign","typeClass","quiz","indicator","src_Note_0","label","type","showOctave","App","useMemo","fretCount","remainingSize","computeFrets","_useState","useState","_useState2","slicedToArray","appMode","setAppMode","_useState3","_useState4","setTuning","_useState5","_useState6","judgement","setJudgement","_useState7","_useState8","answer","setAnswer","_useState9","_useState10","chordRoot","setChordRoot","_useState11","_useState12","chordType","setChordType","_useState13","_useState14","setShowOctave","_useState15","len","val","arguments","undefined","result","push","newBoolArray","_useState16","includedStrings","setIncludedStrings","computeRandomQuestion","strings","reduce","acc","positionToNote","_useState17","_useState18","question","setQuestion","allNotes","handleSubmit","event","b","solution","hasOwnProperty","correct","id","Date","now","preventDefault","value","checked","onChange","e","find","target","toToggle","toConsumableArray","toggleGuitarString","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.165934e4.chunk.js","sourcesContent":["import React from 'react';\nimport './Fret.css';\n\nexport const computeFrets = (fretCount) => {\n  const frets = [];\n  let remainingSize = 10;\n\n  for (let i = 0; i < fretCount; i++) {\n    const size = remainingSize / 17.817;\n    remainingSize = remainingSize - size;\n  \n    frets[i] = {\n      size: size,\n      num: i,\n      dots: 0\n    }\n  \n    if (i === 2 || i === 4 || i === 6 || i === 8) {\n      frets[i].dots = 1;\n    }\n    else if (i === 11) {\n      frets[i].dots = 2;\n    }\n  }\n\n  return frets;\n}\n\nexport default ({num, style, dots}) =>\n  <>\n    <span\n      className=\"Fret-number\"\n      style={{\n        gridArea: `top / f${num}`\n      }}\n    >\n      { num + 1 }\n    </span>\n    <div\n      className=\"Fret\"\n      style={{\n        gridArea: `top-edge / f${num} / bottom-edge / f${num + 1}`\n      }}\n    >\n      {\n        dots === 1 ? <span className=\"dot single\"></span> : null\n      }\n      {\n        dots === 2 ? <>\n          <span className=\"dot double1\"></span><span className=\"dot double2\"></span>\n        </> : null\n      }\n    </div>\n  </>;","import React from 'react';\n\nconst MAX_STRING_WIDTH = 3;\n\nexport default ({includeInQuiz, rootNote, num, count, onToggle }) => {\n  const width = Math.max(1, Math.round(((count - (num + 1)) / count) * MAX_STRING_WIDTH));\n  \n  return <>\n    <div\n      key={ num }\n      onClick={onToggle}\n      className={'root-note ' + (includeInQuiz ? 'included' : 'excluded')}\n      style={{\n        gridArea: `s${ num + 1 } / fretboard-end`\n      }}\n    >{ rootNote.letter }</div>\n    <div\n      className=\"string\"\n      style = {{\n        height: '50%',\n        gridArea: `s${ num } / head / s${ num + 1 } / fretboard-end`,\n        borderBottom: `${ width }px solid yellow`\n      }}\n    ></div>\n  </>\n}","const LETTER_TO_NUM = {\n  'C': 0,\n  'C#': 1,\n  'Db': 1,\n  'D': 2,\n  'D#': 3,\n  'Eb': 3,\n  'E': 4,\n  'F': 5,\n  'F#': 6,\n  'Gb': 6,\n  'G': 7,\n  'G#': 8,\n  'Ab': 8,\n  'A': 9,\n  'A#': 10,\n  'Bb': 10,\n  'B': 11\n};\n\nconst NUM_TO_LETTER = [\n  'C',\n  'C#',\n  'D',\n  'D#',\n  'E',\n  'F',\n  'F#',\n  'G',\n  'G#',\n  'A',\n  'A#',\n  'B'\n];\n\nclass Note {\n  constructor(letter, octave) {\n    this.letter = letter;\n    this.octave = octave;\n  }\n\n  toString() {\n    return this.letter;\n  }\n\n  toSpn() {\n    return this.letter + this.octave;\n  }\n}\n\nexport function letterEquals(a, b) {\n  return LETTER_TO_NUM.hasOwnProperty(a) &&\n    LETTER_TO_NUM.hasOwnProperty(b) &&\n    LETTER_TO_NUM[a] === LETTER_TO_NUM[b];\n}\n\nexport function parseSpn(spn) {\n  if (typeof spn !== 'string') {\n    // This lets us safely call parseSpn on things that might already be note objects.\n    return spn;\n  }\n\n  if (spn.length === 3) {\n    return new Note(spn[0] + spn[1], parseInt(spn[2]));\n  }\n\n  return new Note(spn[0], parseInt(spn[1]));\n}\n\nexport function addSemitones(note, semitones) {\n  const num = LETTER_TO_NUM[note.letter];\n\n  let octave = note.octave;\n  let letter = num + (semitones % 12);\n\n  if (letter < 0) {\n    letter += 12;\n    octave--;\n  }\n  else if (letter >= 12) {\n    letter -= 12;\n    octave++;\n  }\n\n  octave += (semitones / 12) | 0;\n\n  return new Note(\n    NUM_TO_LETTER[letter],\n    octave\n  );\n}\n\nclass Tuning {\n  constructor(name, notes) {\n    this.name = name;\n    this.notes = notes.map(parseSpn);\n  }\n}\n\nexport const TUNINGS = [\n  new Tuning('Standard', [\n    'E2', 'A2', 'D3', 'G3', 'B3', 'E4'\n  ]),\n  new Tuning('Open A', [\n    'E2', 'A2', 'C#3', 'E3', 'A3', 'E4'\n  ]),\n  new Tuning('Open B', [\n    'B2', 'F#2', 'B3', 'F#3', 'B3', 'D#4'\n  ]),\n  new Tuning('Open C', [\n    'C2', 'G2', 'C3', 'G3', 'C4', 'E4'\n  ]),\n  new Tuning('Open D', [\n    'D2', 'A2', 'D3', 'F#3', 'A3', 'D4'\n  ]),\n  new Tuning('Open E', [\n    'E2', 'B2', 'E3', 'G#3', 'B3', 'E4'\n  ]),\n  new Tuning('Open F', [\n    'F2', 'A2', 'C3', 'F3', 'C4', 'F4'\n  ]),\n  new Tuning('Open F#', [\n    'F#2', 'A#2', 'C#3', 'F#3', 'C#4', 'F#4'\n  ]),\n  new Tuning('Open G', [\n    'D2', 'G2', 'D3', 'G3', 'B3', 'D4'\n  ])\n];\n\nexport const INTERVALS = {\n  Unison: 0,\n  MinorSecond: 1,\n  MajorSecond: 2,\n  MinorThird: 3,\n  MajorThird: 4,\n  PerfectFourth: 5,\n  PerfectFifth: 7,\n  MinorSixth: 8,\n  MajorSixth: 9,\n  MinorSeventh: 11,\n  Ocatve: 12\n}\n\nexport const CHORD_QUALITY = {\n  Major: {\n    name: 'Major',\n    short: '',\n    long: 'maj'\n  },\n  Minor: {\n    name: 'Minor',\n    short: 'm',\n    long: 'min'\n  },\n  Augmented: {\n    name: 'Augmented',\n    short: '+',\n    long: 'aug'\n  },\n  Diminished: {\n    named: 'Diminished',\n    short: 'o'\n  }\n}\n\nclass Chord {\n  constructor(quality, rootNote, intervals) {\n    this.quality = quality;\n    this.notes = [\n      rootNote,\n      ...intervals.map(i => addSemitones(rootNote, i))\n    ];\n  }\n\n  shortName() {\n    return this.notes[0].letter + this.quality.short;\n  }\n\n  longName() {\n    return this.notes[0].letter + this.quality.long;\n  }\n}\n\nexport function majorChord(rootNote) {\n  rootNote = parseSpn(rootNote);\n  return new Chord(CHORD_QUALITY.Major, rootNote, [INTERVALS.MajorThird, INTERVALS.PerfectFifth]);\n}\n\nexport function minorChord(rootNote) {\n  rootNote = parseSpn(rootNote);\n  return new Chord(CHORD_QUALITY.Minor, rootNote, [INTERVALS.MinorThird, INTERVALS.PerfectFifth]);\n}\n\n","export function newBoolArray(len, val = true) {\n  const result = [];\n\n  for (let i = 0; i  < len; i++) {\n    result.push(val);\n  }\n\n  return result;\n}\n\nexport function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function tmap(arr, callback) {\n  const l = arr.length;\n\n  return arr.map((item, i) =>\n    callback(item, i, {\n      first: i === 0,\n      last: i === (l - 1),\n      length: l\n    })\n  );\n}","import React from 'react';\nimport { tmap } from './util';\nimport './Fretboard.css';\nimport Fret from './Fret';\n\nconst headSize = 100;\n\nexport const posToGrid = (string, fret) => `s${ string + 1 } / span 1 / s${string + 1} / f${ fret }`;\n\nexport function gridColumns(frets) {\n  return '[start] auto [head] ' + headSize  + 'px ' + \n    tmap(frets, (f, i, { first, last }) =>\n      (first ? '[nut f0] ' : '') +\n      f.size + 'fr' +\n      ' [f' + (i + 1) + (last ? ' fretboard-end]' : ']')\n    ).join(' ') + ' auto [end]'\n}\n\nexport function gridRows(tuning) {\n  const l = tuning.notes.length;\n  return '[top] auto ' +\n    tmap(tuning.notes, (_note, i, { first }) =>\n      (first ? '[top-edge ' : '[') + 's' + (l - i) + '] 40px'\n    ).join(' ') + ' [bottom-edge s0]'\n}\n\nexport default function({ children, frets, tuning}) {\n  return <div\n    className=\"Fretboard\"\n    style={{\n      gridTemplateColumns: gridColumns(frets),\n      gridTemplateRows: gridRows(tuning)\n    }}\n  >\n    <div\n      className=\"Fretboard-head\"\n      style={{\n        gridArea: `top-edge / head / bottom-edge / nut`\n      }}\n    >\n    </div>\n    <div\n      className=\"Fretboard-fingerboard\"\n      style={{\n        gridArea: `top-edge / nut / bottom-edge / fretboard-end`\n      }}\n    ></div>\n\n    { children }\n\n    {\n      frets.map((fret, i) =>\n        <Fret key={i} {...fret}></Fret>\n      )\n    }\n  </div>\n}\n","import React from 'react';\nimport './Note.css';\n\nconst typeClass = {\n  quiz: 'Note-quiz',\n  indicator: 'Note-indicator'\n};\n\nexport default function({ note, type, showOctave, gridArea }) {\n  let label;\n  type = type || 'indicator';\n\n  if (type === 'quiz') {\n    label = '?'\n  }\n  else {\n    label = <span>{ note.letter }{ showOctave ? <sub>{ note.octave }</sub>: null }</span>\n  }\n\n  return <div\n    className={'Note ' + typeClass[type]}\n    style={{gridArea: gridArea}}\n  >\n    { label }\n  </div>\n}\n","import React, { useState, useMemo } from 'react';\nimport { computeFrets} from './Fret';\nimport GuitarString from './GuitarString';\nimport './App.css';\nimport { TUNINGS, addSemitones, letterEquals, majorChord } from './music';\nimport { newBoolArray, getRandomInt } from './util';\nimport Fretboard, { posToGrid } from './Fretboard';\nimport Note from './Note';\n\nconst App = () => {\n  const frets = useMemo(() => computeFrets(12), []);\n  const [appMode, setAppMode] = useState('explore');\n  const [tuning, setTuning] = useState(TUNINGS[0]);\n  const [judgement, setJudgement] = useState(null);\n  const [answer, setAnswer] = useState('');\n  const [chordRoot, setChordRoot] = useState('A');\n  const [chordType, setChordType] = useState('Major');\n  const [showOctave, setShowOctave] = useState(true);\n  const [includedStrings, setIncludedStrings] = useState(newBoolArray(tuning.notes.length));\n\n  const computeRandomQuestion = (includedStrings) => {\n    const strings = includedStrings.reduce((acc, val, i) => {\n      if (val) {\n        acc.push(i);\n      }\n\n      return acc;\n    }, []);\n\n    return {\n      type: 'note',\n      string: strings[getRandomInt(strings.length)],\n      fret: getRandomInt(frets.length)\n    };\n  };\n\n  const positionToNote = (string, fret) => {\n    const rootNote = tuning.notes[string];\n    return addSemitones(rootNote, fret)\n  }\n\n  const [question, setQuestion] = useState(() => \n    computeRandomQuestion(includedStrings)\n  );\n\n  const allNotes = useMemo(() => {\n    const result = [];\n\n    for (let string = 0; string < tuning.notes.length; string++) {\n      for (let fret = 0; fret < frets.length + 1; fret++) {\n        result.push({\n          type: 'indicator',\n          note: positionToNote(string, fret),\n          gridArea: posToGrid(string, fret)\n        })\n      }\n    }\n\n    return result;\n  }, [tuning, showOctave]);\n\n  let notes = [];\n\n  if (appMode === 'quiz') {\n    notes.push({\n      note: positionToNote(question.string, question.fret),\n      type: 'quiz',\n      gridArea: posToGrid(question.string, question.fret)\n    })\n  }\n  else {\n    // const chord = majorChord(chordRoot + '3');\n    // noteIndicators = [];\n\n    // let foundRoot = false;\n\n    // for (let i = 0; i < tuning.notes.length; i++) {\n    //   if (!foundRoot) {\n    //     if (letterEquals(tuning.notes[i].letter, chord.notes[0].letter)) {\n    //       foundRoot = true;\n    //       noteIndicators.push({\n    //         note: tuning.notes[i],\n    //         cssClass: 'indicator',\n    //         gridArea: posToGrid(0, 0)\n    //       })\n    //     }\n    //   }\n    // }\n\n    notes = allNotes;\n  }\n\n  const handleSubmit = event => {\n    // Done late in case the tuning has changed.\n    const solution = positionToNote(question.string, question.fret);\n\n    if (letterEquals(answer, solution)) {\n      setQuestion(computeRandomQuestion(includedStrings));\n      \n      setJudgement({\n        correct: true,\n        id: Date.now()\n      });\n    }\n    else {\n      setJudgement({\n        correct: false,\n        id: Date.now()\n      });\n    }\n\n    setAnswer('');\n\n    event.preventDefault();\n  };\n\n  const handleTuningChanged = (e) => {\n    setTuning(TUNINGS.find(tuning => tuning.name === e.target.value) || tuning);\n  }\n\n  const toggleGuitarString = toToggle => {\n    let value = [...includedStrings];\n    value[toToggle] = !value[toToggle];\n    setIncludedStrings(value);\n\n    if (question.string === toToggle) {\n      setQuestion(computeRandomQuestion(value));\n    }\n  };\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Guitar Quiz    \n      </header>\n      <div className=\"App-options\">\n        <label>\n          Mode\n        </label>\n        <label className=\"App-explore\">\n          <input\n            type=\"radio\"\n            value=\"explore\"\n            checked={appMode === 'explore'}\n            onChange={() => setAppMode('explore')}\n          />\n            Explore\n        </label>\n        <label className=\"App-quiz\">\n          <input\n            type=\"radio\"\n            value=\"quiz\"\n            checked={appMode === 'quiz'}\n            onChange={() => setAppMode('quiz')}\n          />\n          Quiz\n        </label>\n\n        <label className=\"App-tuning\">Tuning</label>\n        <select\n          className=\"App-tuning\"\n          value={tuning.name}\n          onChange={handleTuningChanged}\n        >\n          { TUNINGS.map((tuning, i) => <option key={i}>{tuning.name}</option>)}\n        </select>\n\n        <label className=\"App-show-octave\">\n          <input\n            type=\"checkbox\"\n            checked={showOctave}\n            onChange={() => setShowOctave(!showOctave) }\n          /> Show octave\n        </label>\n      </div>\n      <Fretboard\n        frets={frets}\n        tuning={tuning}\n      >\n        {\n          notes.map((note, i) =>\n            <Note\n              key={i}\n              showOctave={showOctave}\n              {...note}\n            ></Note>\n          )\n        }\n\n        {\n          tuning.notes.map((rootNote, i, { length } ) =>\n            <GuitarString\n              key={i}\n              num={i}\n              count={length}\n              onToggle={() => toggleGuitarString(i)}\n              includeInQuiz={includedStrings[i]}\n              rootNote={rootNote}\n            ></GuitarString>\n          )\n        }\n      </Fretboard>\n\n      {\n        appMode === 'quiz' ? <form \n          className=\"App-question\"\n          onSubmit={event => handleSubmit(event)}\n        >\n          <h1>What is the higlighted note?</h1>\n          <input\n            className=\"App-answer-field\"\n            type=\"text\"\n            value={answer}\n            onChange={event => setAnswer(event.target.value)}\n          />\n          {\n            judgement ?\n              <div\n                className={'App-judgement ' + (judgement.correct ? 'correct' : 'incorrect') }\n                key={judgement.id}\n              >\n                { judgement.correct ? 'Correct' : 'Incorrect' }\n              </div> : null\n          }\n        </form> : <div className=\"chordSelector\">\n          <select\n            className=\"App-chord-root\"\n            value={chordRoot}\n            onChange={event => setChordRoot(event.target.value)}\n          >\n            <option>A</option>\n            <option>Bb</option>\n            <option>B</option>\n            <option>C</option>\n          </select>\n          <select\n            className=\"App-chord-type\"\n            value={chordType}\n            onChange={event => setChordType(event.target.value)}\n          >\n            <option>Major</option>\n            <option>Minor</option>\n          </select>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}