{"version":3,"sources":["music.ts","util.ts","Fret.tsx","NoteIndicator.js","settings-context.ts","Fretboard.tsx","Quiz.tsx","GuitarStrings.tsx","voicing.ts","Listbox.tsx","Explorer.tsx","Settings.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["LETTER_TO_NUM","C","C#","Db","D","D#","Eb","E","F","F#","Gb","G","G#","Ab","A","A#","Bb","B","NUM_TO_LETTER","Note","tone","octave","Object","classCallCheck","this","createClass","key","value","note","parseSpn","spn","length","parseInt","interval","start","result","addSemitones","semitones","num","Tuning","name","notes","map","join","string","fret","TUNINGS","INTERVALS","Unison","MinorSecond","MajorSecond","MinorThird","MajorThird","PerfectFourth","PerfectFifth","MinorSixth","MajorSixth","MinorSeventh","Ocatve","CHORD_QUALITY","Major","short","long","Minor","Augmented","Diminished","Chord","quality","rootNote","intervals","concat","toConsumableArray","i","get","getRandomInt","max","Math","floor","random","tmap","arr","callback","l","item","first","last","src_Fret","_ref","react_default","a","createElement","Fragment","className","style","gridArea","typeClass","quiz","indicator","chordRoot","NoteIndicator","label","type","showOctave","SettingsContext","createContext","tuning","fretCount","update","headSize","positionToGridArea","src_Fretboard","_ref3","children","_useMemo","useMemo","frets","remainingSize","size","push","computeFretSizes","gridColumns","_useMemo2","slicedToArray","fretSizes","columns","useContext","rows","_note","_ref2","gridRows","gridTemplateColumns","gridTemplateRows","assign","_size","computeRandomQuestion","includedStrings","strings","reduce","acc","val","Quiz","content","_useContext","_useState","useState","_useState2","answer","setAnswer","_useState3","_useState4","judgement","setJudgement","_useState5","_useState6","question","setQuestion","handleSubmit","e","b","solution","positionToNote","toString","hasOwnProperty","correct","id","Date","now","preventDefault","onSubmit","event","onChange","target","GuitarStrings","activeStrings","onToggle","width","round","react","onClick","height","borderBottom","Voicings","arguments","undefined","tuningCache","Map","chord","voicingsCache","set","voicings","root","inversions","buildVoicing","rootNotes","current","unplaced","placed","_rootNotes","toArray","remaining","slice","unmuted","filter","n","min","apply","possibilities","_loop","newMin","newMax","_","i2","voicing","Voicing","bassNoteIndex","findIndex","addCurrent","sort","distance","createVoicings","_this","minFret","maxFret","strValue","React","memo","options","onSelect","ulEl","useRef","moveUpDownEnabled","moveButton","keysSoFar","_useState7","_useState8","activeDescendant","focusFirstItem","querySelector","ref","cn","role","onFocus","onKeyDown","evt","nextItem","document","getElementById","altKey","previousElementSibling","nextElementSibling","itemList","querySelectorAll","focusLastItem","getAttribute","findItemToFocus","o","selected","src_Explorer","match","history","params","chordType","decodeURIComponent","voicingIndex","setVoicingIndex","minorChord","chordVoicings","getVoicings","showVoicing","index","played","forEach","src_Listbox","encodeURIComponent","indexOf","Settings","find","currentTarget","checked","App","setTuning","setShowOctave","len","newBoolArray","setActiveStrings","toggleGuitarString","toToggle","neck","BrowserRouter","Provider","NavLink","exact","to","Route","path","render","Redirect","props","Boolean","window","location","hostname","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bc9fe7c.chunk.js","sourcesContent":["export const LETTER_TO_NUM: {[tone: string]: number} = {\n  'C': 0,\n  'C#': 1,\n  'Db': 1,\n  'D': 2,\n  'D#': 3,\n  'Eb': 3,\n  'E': 4,\n  'F': 5,\n  'F#': 6,\n  'Gb': 6,\n  'G': 7,\n  'G#': 8,\n  'Ab': 8,\n  'A': 9,\n  'A#': 10,\n  'Bb': 10,\n  'B': 11\n};\n\nexport const NUM_TO_LETTER = [\n  'C',\n  'C#',\n  'D',\n  'D#',\n  'E',\n  'F',\n  'F#',\n  'G',\n  'G#',\n  'A',\n  'A#',\n  'B'\n];\n\nexport class Note {\n  constructor(public tone: string, public octave: number) {}\n\n  toString(): string {\n    return this.tone;\n  }\n\n  toSpn(): string {\n    return this.tone + this.octave;\n  }\n\n  toneEquals(note: Note): boolean {\n    return LETTER_TO_NUM[this.tone] === LETTER_TO_NUM[note.tone];\n  }\n}\n\nexport function toneEquals(a: string, b: string): boolean {\n  return LETTER_TO_NUM.hasOwnProperty(a) &&\n    LETTER_TO_NUM.hasOwnProperty(b) &&\n    LETTER_TO_NUM[a] === LETTER_TO_NUM[b];\n}\n\nexport function parseSpn(spn: string | Note): Note {\n  if (typeof spn !== 'string') {\n    // This lets us safely call parseSpn on things that might already be note objects.\n    return spn;\n  }\n\n  if (spn.length === 3) {\n    return new Note(spn[0] + spn[1], parseInt(spn[2]));\n  }\n\n  return new Note(spn[0], parseInt(spn[1]));\n}\n\nexport function interval(note: Note, tone: string): number {\n  let start = LETTER_TO_NUM[parseSpn(note).tone]; // 9\n  let end = LETTER_TO_NUM[tone]; // 0\n\n  let result = end - start;\n\n  if (result < 0) {\n    result += 12;\n  }\n\n  return result;\n}\n\nexport function addSemitones(note: Note, semitones: number) {\n  const num = LETTER_TO_NUM[note.tone];\n\n  let octave = note.octave;\n  let tone = num + (semitones % 12);\n\n  if (tone < 0) {\n    tone += 12;\n    octave--;\n  }\n  else if (tone >= 12) {\n    tone -= 12;\n    octave++;\n  }\n\n  octave += (semitones / 12) | 0;\n\n  return new Note(\n    NUM_TO_LETTER[tone],\n    octave\n  );\n}\n\nexport class Tuning {\n  notes: Note[];\n\n  constructor(public name: string, notes: string[]) {\n    this.notes = notes.map(parseSpn);\n  }\n\n  toString(): string {\n    return this.notes.join('-');\n  }\n\n  positionToNote(string: number, fret: number) {\n    const rootNote = this.notes[string];\n    return addSemitones(rootNote, fret)\n  }\n}\n\nexport const TUNINGS = [\n  new Tuning('Standard', [\n    'E2', 'A2', 'D3', 'G3', 'B3', 'E4'\n  ]),\n  new Tuning('Open A', [\n    'E2', 'A2', 'C#3', 'E3', 'A3', 'E4'\n  ]),\n  new Tuning('Open B', [\n    'B2', 'F#2', 'B3', 'F#3', 'B3', 'D#4'\n  ]),\n  new Tuning('Open C', [\n    'C2', 'G2', 'C3', 'G3', 'C4', 'E4'\n  ]),\n  new Tuning('Open D', [\n    'D2', 'A2', 'D3', 'F#3', 'A3', 'D4'\n  ]),\n  new Tuning('Open E', [\n    'E2', 'B2', 'E3', 'G#3', 'B3', 'E4'\n  ]),\n  new Tuning('Open F', [\n    'F2', 'A2', 'C3', 'F3', 'C4', 'F4'\n  ]),\n  new Tuning('Open F#', [\n    'F#2', 'A#2', 'C#3', 'F#3', 'C#4', 'F#4'\n  ]),\n  new Tuning('Open G', [\n    'D2', 'G2', 'D3', 'G3', 'B3', 'D4'\n  ])\n];\n\nexport const INTERVALS = {\n  Unison: 0,\n  MinorSecond: 1,\n  MajorSecond: 2,\n  MinorThird: 3,\n  MajorThird: 4,\n  PerfectFourth: 5,\n  PerfectFifth: 7,\n  MinorSixth: 8,\n  MajorSixth: 9,\n  MinorSeventh: 11,\n  Ocatve: 12\n}\n\ninterface ChordQuality {\n  name: string;\n  short: string;\n  long: string;\n}\n\nexport const CHORD_QUALITY: { [name: string]: ChordQuality } = {\n  Major: {\n    name: 'Major',\n    short: '',\n    long: 'maj'\n  },\n  Minor: {\n    name: 'Minor',\n    short: 'm',\n    long: 'min'\n  },\n  Augmented: {\n    name: 'Augmented',\n    short: '+',\n    long: 'aug'\n  },\n  Diminished: {\n    name: 'Diminished',\n    short: 'o',\n    long: 'dim'\n  }\n}\n\nexport class Chord {\n  public notes: Note[];\n\n  constructor(public quality: ChordQuality, rootNote: Note, intervals: number[]) {\n    this.notes = [\n      rootNote,\n      ...intervals.map(i => addSemitones(rootNote, i))\n    ];\n  }\n\n  shortName(): string {\n    return this.notes[0].tone + this.quality.short;\n  }\n\n  longName(): string {\n    return this.notes[0].tone + this.quality.long;\n  }\n\n  get rootNote(): Note {\n    return this.notes[0];\n  }\n}\n\nexport function majorChord(rootNote: Note | string): Chord {\n  rootNote = parseSpn(rootNote);\n  return new Chord(CHORD_QUALITY.Major, rootNote, [INTERVALS.MajorThird, INTERVALS.PerfectFifth]);\n}\n\nexport function minorChord(rootNote: Note | string): Chord {\n  rootNote = parseSpn(rootNote);\n  return new Chord(CHORD_QUALITY.Minor, rootNote, [INTERVALS.MinorThird, INTERVALS.PerfectFifth]);\n}\n","export function newBoolArray(len: number, val = true): boolean[] {\n  const result = [];\n\n  for (let i = 0; i  < len; i++) {\n    result.push(val);\n  }\n\n  return result;\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function tmap<T>(\n  arr: T[],\n  callback: (item: T, index: number, props: { first: boolean, last: boolean, length: number}) => void\n) {\n  const l = arr.length;\n\n  return arr.map((item, i) =>\n    callback(item, i, {\n      first: i === 0,\n      last: i === (l - 1),\n      length: l\n    })\n  );\n}\n\nexport function isStringArray(value: any): value is string[] {\n  if (value instanceof Array && (value.length === 0 || typeof value[0] === 'string')) {\n    return true;\n  }\n\n  return false;\n}","import React, { ReactNode } from 'react';\nimport './Fret.scss';\n\nfunction dots(i: number): ReactNode {\n  return (i === 2 || i === 4 || i === 6 || i === 8 || i === 14) ? \n    <span className=\"dot single\"></span>\n  : (i === 11) ? \n    <>\n      <span className=\"dot double1\"></span><span className=\"dot double2\"></span>\n    </>\n  :\n    null;\n}\n\nexport default ({num}: {num: number}) =>\n  <>\n    <span\n      className=\"Fret-number\"\n      style={{\n        gridArea: `top / f${num}`\n      }}\n    >\n      { num + 1 }\n    </span>\n    <div\n      className=\"Fret\"\n      style={{\n        gridArea: `top-edge / f${num} / bottom-edge / f${num + 1}`\n      }}\n    >\n      { dots(num) }\n    </div>\n  </>;\n","import React from 'react';\nimport './Note.css';\n\nconst typeClass = {\n  quiz: 'Note-quiz',\n  indicator: 'Note-indicator',\n  chordRoot: 'Note-chord-root'\n};\n\nexport default function({ note, type, showOctave, gridArea }) {\n  let label;\n  type = type || 'indicator';\n\n  if (type === 'quiz') {\n    label = '?'\n  }\n  else {\n    label = <span>{ note.tone }{ showOctave ? <sub>{ note.octave }</sub>: null }</span>\n  }\n\n  return <div\n    className={'Note ' + typeClass[type]}\n    style={{gridArea: gridArea}}\n  >\n    { label }\n  </div>\n}\n","import { createContext } from 'react';\nimport { TUNINGS, Tuning } from './music';\n\nexport interface Settings {\n  showOctave: boolean;\n  tuning: Tuning;\n  fretCount: number;\n  update: (settings: { showOctave?: boolean, tuning?: Tuning}) => void\n}\n\nexport const SettingsContext = createContext<Settings>({\n  showOctave: false,\n  tuning: TUNINGS[0],\n  fretCount: 14,\n  update: () => {}\n});\n","import React, { useMemo, ReactNode, useContext } from 'react';\nimport { tmap } from './util';\nimport './Fretboard.scss';\nimport Fret from './Fret';\nimport { Tuning, Note } from './music';\nimport NoteIndicator from './NoteIndicator';\nimport { SettingsContext } from './settings-context';\nconst headSize = 100;\n\nexport const positionToGridArea = \n  (string: number, fret: number) => `s${ string + 1 } / span 1 / s${string + 1} / f${ fret }`;\n\nexport const computeFretSizes = (fretCount: number): number[] => {\n  const frets = [];\n  let remainingSize = 10;\n\n  for (let i = 0; i < fretCount; i++) {\n    const size = remainingSize / 17.817;\n    remainingSize = remainingSize - size;\n    frets.push(size);\n  }\n\n  return frets;\n}\n\nexport function gridColumns(frets: number[]): string {\n  return '[start] auto [head] ' + headSize  + 'px ' + \n    tmap(frets, (size, i, { first, last }) =>\n      (first ? '[nut f0] ' : '') +\n      size + 'fr' +\n      ' [f' + (i + 1) + (last ? ' fretboard-end]' : ']')\n    ).join(' ') + ' auto [end]'\n}\n\nexport function gridRows(tuning: Tuning): string {\n  const l = tuning.notes.length;\n  return '[top] auto ' +\n    tmap(tuning.notes, (_note, i, { first }) =>\n      (first ? '[top-edge ' : '[') + 's' + (l - i) + '] 40px'\n    ).join(' ') + ' [bottom-edge s0]'\n}\n\nexport interface Indicator {\n  type: 'quiz' | 'indicator' | 'chordRoot';\n  note: Note;\n  gridArea: string;\n}\n\ninterface Props {\n  children?: ReactNode;\n  fretCount: number;\n  tuning: Tuning;\n  notes: Indicator[];\n}\n\nexport default function({children, fretCount, tuning, notes}: Props) {\n  const [\n    fretSizes,\n    columns,\n  ] = useMemo<[number[], string]>(() => {\n    const frets = computeFretSizes(fretCount);\n\n    return [\n      frets,\n      gridColumns(frets)\n    ]\n  }, [fretCount]);\n\n  const { showOctave } = useContext(SettingsContext);\n\n  const rows = useMemo(() => gridRows(tuning), [tuning]);\n\n  return <div\n    className=\"Fretboard\"\n    style={{\n      gridTemplateColumns: columns,\n      gridTemplateRows: rows\n    }}\n  >\n    <div\n      className=\"Fretboard-head\"\n      style={{\n        gridArea: `top-edge / head / bottom-edge / nut`\n      }}\n    >\n    </div>\n    <div\n      className=\"Fretboard-fingerboard\"\n      style={{\n        gridArea: `top-edge / nut / bottom-edge / fretboard-end`\n      }}\n    ></div>\n\n    { children }\n\n    {\n      notes.map((note, i) =>\n        <NoteIndicator\n          key={'note_' + i}\n          showOctave={showOctave}\n          {...note}\n        ></NoteIndicator>\n      )\n    }\n\n    {\n      fretSizes.map((_size, i) =>\n        <Fret\n          key={'fret' + i}\n          num={i}\n        ></Fret>\n      )\n    }\n  </div>\n}\n","import React, { ReactNode, useState, SyntheticEvent, useContext } from 'react';\nimport { Indicator, positionToGridArea } from './Fretboard';\nimport { getRandomInt } from './util';\nimport { SettingsContext } from './settings-context';\nimport { toneEquals } from './music';\n\ninterface Judgement {\n  correct: boolean;\n  id: number;\n}\n\ninterface Question {\n  type: string;\n  string: number;\n  fret: number;\n}\n\nconst computeRandomQuestion = (includedStrings: boolean[], fretCount: number): Question => {\n  const strings = includedStrings.reduce<number[]>((acc, val, i) => {\n    if (val) {\n      acc.push(i);\n    }\n\n    return acc;\n  }, []);\n\n  return {\n    type: 'note',\n    string: strings[getRandomInt(strings.length)],\n    fret: getRandomInt(fretCount)\n  };\n};\n\ninterface Params {\n  content: (notes: Indicator[]) => ReactNode;\n  includedStrings: boolean[];\n}\n\nexport default ({ content, includedStrings }: Params) => {\n  const { fretCount, tuning } = useContext(SettingsContext);\n\n  const [answer, setAnswer] = useState('');\n  const [judgement, setJudgement] = useState<Judgement | null>(null);\n  const [question, setQuestion] = useState(() => \n    computeRandomQuestion(includedStrings, fretCount)\n  );\n\n  const handleSubmit = (e: SyntheticEvent<HTMLFormElement>) => {\n    // Done late in case the tuning has changed.\n    const solution = tuning.positionToNote(question.string, question.fret);\n\n    if (toneEquals(answer, solution.toString())) {\n      setQuestion(computeRandomQuestion(includedStrings, fretCount));\n      \n      setJudgement({\n        correct: true,\n        id: Date.now()\n      });\n    }\n    else {\n      setJudgement({\n        correct: false,\n        id: Date.now()\n      });\n    }\n\n    setAnswer('');\n\n    e.preventDefault();\n  };\n\n  if (!includedStrings[question.string]) {\n    setQuestion(computeRandomQuestion(includedStrings, fretCount));\n  }\n\n  const notes: Indicator[] = [{\n    note: tuning.positionToNote(question.string, question.fret),\n    type: 'quiz',\n    gridArea: positionToGridArea(question.string, question.fret)\n  }];\n\n  return (\n    <>\n      { content(notes) }\n      <div className=\"Quiz\">\n        <form \n          className=\"App-question\"\n          onSubmit={event => handleSubmit(event)}\n        >\n          <h1>What is the higlighted note?</h1>\n          <input\n            className=\"App-answer-field\"\n            type=\"text\"\n            value={answer}\n            onChange={event => setAnswer(event.target.value)}\n          />\n          {\n            judgement ?\n              <div\n                className={'App-judgement ' + (judgement.correct ? 'correct' : 'incorrect') }\n                key={judgement.id}\n              >\n                { judgement.correct ? 'Correct' : 'Incorrect' }\n              </div> : null\n          }\n        </form>\n      </div>\n    </>\n  )\n}\n","import React, { Fragment, useContext } from 'react';\nimport { Tuning } from './music';\nimport { SettingsContext } from './settings-context';\n\nconst MAX_STRING_WIDTH = 3;\n\nexport default (\n  { activeStrings, onToggle}: { activeStrings: boolean[], onToggle: (num: number) => void}\n) => {\n  const { tuning } = useContext(SettingsContext);\n\n  return <>{\n    tuning.notes.map((rootNote, num, { length } ) => {\n      const width = Math.max(1, Math.round(((length - (num + 1)) / length) * MAX_STRING_WIDTH));\n      return (\n        <Fragment key={num}>\n          <div\n            onClick={() => onToggle(num)}\n            className={'root-note ' + (activeStrings[num] ? 'included' : 'excluded')}\n            style={{\n              gridArea: `s${ num + 1 } / fretboard-end`\n            }}\n          >{ rootNote.tone }</div>\n          <div\n            className=\"string\"\n            style = {{\n              height: '50%',\n              gridArea: `s${ num } / head / s${ num + 1 } / fretboard-end`,\n              borderBottom: `${ width }px solid yellow`\n            }}\n          ></div>\n        </Fragment>\n      );\n    })\n  }</>\n}\n","import { interval, addSemitones, Tuning, Chord, Note } from './music';\n\nexport class Voicings {\n  tuningCache = new Map<Tuning, Map<Chord, ChordVoicings>>();\n\n  constructor(public fretCount = 12) {}\n\n  getVoicings(tuning: Tuning, chord: Chord): ChordVoicings {\n    let voicingsCache = this.tuningCache.get(tuning);\n  \n    if (!voicingsCache) {\n      this.tuningCache.set(tuning, voicingsCache = new Map());\n    }\n  \n    let voicings = voicingsCache.get(chord);\n\n    if (!voicings) {\n      voicingsCache.set(chord, voicings = createVoicings(tuning, chord, this.fretCount));\n    }\n  \n    return voicings;\n  }\n}\n\ninterface ChordVoicings {\n  root: Voicing[];\n  inversions: Voicing[];\n}\n\ntype VoicingNotes = (number | null)[];\n\nexport class Voicing {\n  minFret: number;\n  maxFret: number;\n  distance: number;\n  private strValue: string;\n\n  constructor(public notes: VoicingNotes) {\n    const unmuted = notes.filter(n => n !== null) as number[];\n    this.minFret = Math.min(...unmuted);\n    this.maxFret = Math.max(...unmuted);\n    this.distance = notes.reduce<number>((a, b) => a + (b === null ? this.maxFret + 1 : b), 0);\n    this.notes = notes;\n    this.strValue = this.notes.map(n => n === null ? 'x' : n).join(' ');\n  }\n\n  toString() {\n    return this.strValue;\n  }\n}\n\nexport function createVoicings(tuning: Tuning, chord: Chord, fretCount: number): ChordVoicings {\n  const result: ChordVoicings = {\n    root: [],\n    inversions: []\n  };\n\n  function addCurrent(current: VoicingNotes) {\n    const voicing = new Voicing(current);\n\n    const bassNoteIndex = current.findIndex(n => n !== null) as number;\n    const bassNote = addSemitones(tuning.notes[bassNoteIndex], current[bassNoteIndex] as number);\n    const inversion = bassNote.tone !== chord.notes[0].tone\n\n    if (inversion) {\n      result.inversions.push(voicing);\n    }\n    else {\n      result.root.push(voicing);\n    }\n  }\n\n  function buildVoicing(rootNotes: Note[], current: (number | null)[], unplaced: Note[], placed: Note[]) {\n    if (rootNotes.length === 0) {\n      if (unplaced.length === 0) {\n        addCurrent(current);\n      }\n\n      return;\n    }\n\n    const [rootNote, ...remaining] = rootNotes;\n    const unmuted = current.filter(n => n !== null) as number[];\n    const min = Math.min(...unmuted);\n    const max = Math.max(...unmuted);\n\n    let possibilities = 0;\n\n    for (let n = 0; n < unplaced.length; n++) {\n      const start = interval(rootNote, unplaced[n].toString());\n  \n      for(let i = start; i < fretCount + 1; i += 12) {\n        const newMin = Math.min(i, min);\n        const newMax = Math.max(i, max);\n\n        if (newMax - newMin > 4) {\n          continue;\n        }\n\n        buildVoicing(\n          remaining,\n          [...current, i],\n          unplaced.filter((_, i2) => i2 !== n),\n          [...placed, unplaced[n]]\n        );\n\n        possibilities++;\n      }\n    }\n\n    if (tuning.notes.length - current.length > unplaced.length) {\n      // It's still possible to include repeated notes / mutes while placing all unplaced notes.\n\n      for (let n = 0; n < placed.length; n++) {\n        const start = interval(rootNote, placed[n].toString());\n    \n        for(let i = start; i < fretCount + 1; i += 12) {\n          const newMin = Math.min(i, min);\n          const newMax = Math.max(i, max);\n  \n          if (newMax - newMin > 4) {\n            continue;\n          }\n\n          buildVoicing(\n            remaining,\n            [...current, i],\n            unplaced,\n            placed\n          );\n\n          possibilities++;\n        }\n      }\n\n      // We only consider muting if we can't find any valid note to play,\n      // or we haven't yet placed any note. This prevents adding lots of\n      // silly variations where we're just unncessarily muting each string\n      // in a given voicing.\n      if (possibilities === 0 || placed.length === 0) {\n        buildVoicing(\n          remaining,\n          [...current, null],\n          unplaced,\n          placed\n        );\n      }\n    }\n  }\n\n  buildVoicing(\n    tuning.notes,\n    [],\n    chord.notes,\n    []\n  );\n\n  result.root.sort((a, b) => a.distance - b.distance);\n  result.inversions.sort((a, b) => a.distance - b.distance);\n\n  return result;\n}","import React, { ReactNode, useState, useRef, KeyboardEvent, useMemo } from 'react';\nimport './Listbox.scss';\nimport cn from 'classnames';\nimport { isStringArray } from './util';\n\nexport interface Option {\n  label: string;\n  value: any;\n}\n\ninterface Props {\n  options: any[];\n  className?: string;\n  value: any;\n  onSelect: (value: any) => void;\n}\n\nexport default React.memo(({ options, className, value, onSelect }: Props) => {\n  const ulEl = useRef<HTMLUListElement>(null);\n  const [moveUpDownEnabled, setMoveUpDownEnabled] = useState(false);\n  const [moveButton, setMoveButton] = useState(null);\n  const [keysSoFar, setKeysSoFar] = useState('');\n  const [activeDescendant, setActiveDescendnt] = useState<string | null>(null);\n  \n  function focusItem(item: Element) {\n\n  }\n\n  function focusFirstItem() {\n    if (ulEl.current) {\n      const firstItem = ulEl.current.querySelector('[role=\"option\"]');\n\n      if (firstItem) {\n        focusItem(firstItem);\n      }\n    }\n  }\n\n  function focusLastItem() {\n    if (ulEl.current) {\n      const itemList = ulEl.current.querySelectorAll('[role=\"option\"]');\n\n      if (itemList.length) {\n        focusItem(itemList[itemList.length - 1]);\n      }\n    }\n  }\n\n  function setupFocus() {\n    if (activeDescendant) {\n      return;\n    }\n\n    focusFirstItem();\n  }\n\n  function moveUpItems() {\n\n  }\n\n  function moveDownItems() {\n\n  }\n\n  function toggleSelectItem(item: Element) {\n\n  }\n\n  function findItemToFocus(key: string): Element | null {\n    if (!ulEl.current) {\n      return null;\n    }\n\n    const itemList = ulEl.current.querySelectorAll('[role=\"option\"]');\n    let searchIndex = 0;\n\n    if (keysSoFar) {\n      for (let i = 0; i < keysSoFar.length; i++) {\n        if (itemList[i].getAttribute('id') == activeDescendant) {\n          searchIndex = 0;\n        }\n      }\n    }\n\n    const soFar = keysSoFar + key;\n\n    return null;\n  }\n\n  function checkKeyPress(evt: KeyboardEvent) {\n    const key = evt.key;\n  \n    if (!activeDescendant) {\n      return;\n    }\n\n    let nextItem: Element | null = document.getElementById(activeDescendant);\n\n    if (!nextItem) {\n      return;\n    }\n\n    switch(key) {\n      case 'PageUp':\n      case 'PageDown':\n        if (moveUpDownEnabled) {\n          evt.preventDefault();\n\n          if (key === 'PageUp') {\n            moveUpItems();\n          }\n          else {\n            moveDownItems();\n          }\n        }\n\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n        evt.preventDefault();\n\n        if (moveUpDownEnabled && evt.altKey) {\n          if (key === 'ArrowUp') {\n            moveUpItems();\n          }\n          else {\n            moveDownItems();\n          }\n          \n          return;\n        }\n\n        if (key === 'ArrowUp') {\n          nextItem = nextItem.previousElementSibling;\n        }\n        else {\n          nextItem = nextItem.nextElementSibling;\n        }\n\n        if (nextItem) {\n          focusItem(nextItem);\n        }\n\n        break;\n\n      case 'Home':\n        evt.preventDefault();\n        focusFirstItem();\n        break;\n      case 'End':\n        evt.preventDefault();\n        focusLastItem();\n        break;\n      case 'Space':\n        evt.preventDefault();\n        toggleSelectItem(nextItem);\n        break;\n      case 'Backspace':\n      case 'Delete':\n      case 'Return':\n       if (!moveButton) {\n         return;\n       }\n\n       break;\n      default:\n       const itemToFocus = findItemToFocus(key);\n       if (itemToFocus) {\n         focusItem(itemToFocus);\n       }\n       break;\n    }\n  }\n\n  function checkClickItem() {}\n\n  return (\n    <ul\n      ref={ulEl}\n      className={cn('Listbox', className)}\n      role=\"listbox\"\n      onFocus={setupFocus}\n      onKeyDown={checkKeyPress}\n    >\n      { options.map((o, i) => (\n        <li\n          key={i}\n          className={cn('Listbox-item', { selected: value === o }) }\n          role=\"option\"\n          onClick={() => onSelect(o)}\n        >{ o.toString() }</li>\n      )) }\n    </ul>\n  );\n});\n","import React, { useContext, ReactNode, useState, useMemo, useEffect } from 'react';\nimport { Indicator, positionToGridArea } from './Fretboard';\nimport { SettingsContext } from './settings-context';\nimport { Voicings } from './voicing';\nimport { majorChord, minorChord, addSemitones } from './music';\nimport Listbox from './Listbox';\nimport './Explorer.scss';\nimport { RouteProps, RouteChildrenProps } from 'react-router';\n\ninterface Params { \n  chordRoot: string;\n  chordType: string;\n}\n\ninterface Props extends RouteChildrenProps<Params> {\n  content: (notes: Indicator[]) => ReactNode;\n\n}\n\nexport default ({ content, match, history }: Props) => {\n  const { tuning, fretCount } = useContext(SettingsContext);\n  // const [chordRoot, setChordRoot] = useState('A');\n  // const [chordType, setChordType] = useState('Major');\n\n  let { chordRoot, chordType } = match ? match.params : { chordRoot: 'A', chordType: 'Major' };\n\n  chordRoot = decodeURIComponent(chordRoot);\n\n  const voicings = useMemo(() => new Voicings(fretCount), []);\n  let [voicingIndex, setVoicingIndex] = useState(0);\n\n  const chord = useMemo(() => {\n    return chordType == 'Major' ? majorChord(chordRoot + '3') : minorChord(chordRoot + '3');\n  }, [chordRoot, chordType]);\n\n  const chordVoicings = useMemo(() => {\n    setVoicingIndex(voicingIndex = 0);\n    return voicings.getVoicings(tuning, chord).root;\n  }, [tuning, chord]);\n\n  // useEffect(() => {\n  //   const allNotes: Indicator[] = [];\n\n  //   for (let string = 0; string < tuning.notes.length; string++) {\n  //     for (let fret = 0; fret < fretCount + 1; fret++) {\n  //       allNotes.push({\n  //         type: 'indicator',\n  //         note: tuning.positionToNote(string, fret),\n  //         gridArea: positionToGridArea(string, fret)\n  //       })\n  //     }\n  //   }\n\n  //   setNotes(allNotes);\n  // }, [tuning, fretCount]);\n\n  const voicing = chordVoicings[voicingIndex];\n\n  const showVoicing = (index: number) => {\n    if (index < 0) {\n      index = 0;\n    }\n    else if (index >= chordVoicings.length) {\n      index = chordVoicings.length - 1;\n    }\n\n    setVoicingIndex(index);\n  }\n\n  const notes = useMemo(() => {\n    const played: Indicator[] = [];\n\n    voicing.notes.forEach((fret, string) => {\n      if (fret !== null) {\n        let note = addSemitones(tuning.notes[string], fret);\n\n        played.push({\n          type: note.tone === chord.rootNote.tone ? 'chordRoot' : 'indicator',\n          note,\n          gridArea: positionToGridArea(string, fret)\n        });\n      }\n    });\n\n    return played;\n  }, [voicing]);\n\n  const showChord = () => {\n    showVoicing(0);\n  };\n\n  const nextVoicing = () => {\n    showVoicing(voicingIndex + 1);\n  }\n\n  const prevVoicing = () => {\n    showVoicing(voicingIndex - 1);\n  }\n\n  const firstVoicing = () => {\n    showVoicing(Number.NEGATIVE_INFINITY);\n  }\n\n  const lastVoicing = () => {\n    showVoicing(Number.POSITIVE_INFINITY);\n  }\n\n  return (\n    <>\n      { content(notes) }\n\n      <div className=\"Explorer\">\n        <label className=\"Explorer-chord-label\">Root</label>\n        <Listbox\n          className=\"Explorer-chord\"\n          options={['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']}\n          value={chordRoot}\n          onSelect={value => history.push(`/explore/${ encodeURIComponent(value) }/${ chordType }`)}\n        />\n\n        <label className=\"Explorer-chord-root-label\">Chord</label>\n        <Listbox\n          className=\"Explorer-chord-root\"\n          options={['Major', 'Minor']}\n          value={chordType}\n          onSelect={value => history.push(`/explore/${ encodeURIComponent(chordRoot) }/${ value }`)}\n        />\n\n        <label className=\"Explorer-voicings-label\">{ chordVoicings.length} voicings</label>\n\n        <Listbox\n          className=\"Explorer-voicings\"\n          options={chordVoicings}\n          value={voicing}\n          onSelect={value => setVoicingIndex(chordVoicings.indexOf(value))}\n        />\n\n        <div className=\"Explorer-voicings-nav\">\n          <button onClick={() => setVoicingIndex(0)}>|&lt;</button>\n          <button onClick={() => showVoicing(voicingIndex - 1)}>&lt;</button>\n          <button onClick={() => showVoicing(voicingIndex + 1)}>&gt;</button>\n          <button onClick={() => showVoicing(chordVoicings.length - 1)}>&gt;|</button>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useContext, SyntheticEvent } from 'react';\nimport { SettingsContext } from './settings-context';\nimport { TUNINGS } from './music';\n\nexport default () => {\n  const { tuning, showOctave, update} = useContext(SettingsContext);\n\n  const handleTuningChanged = (e: SyntheticEvent<HTMLSelectElement>) => {\n    update({ tuning: TUNINGS.find(tuning => tuning.name === e.currentTarget.value) || tuning });\n  }\n  \n  return (\n    <div className=\"App-options\">\n      \n      <label className=\"App-tuning\">Tuning</label>\n      <select\n        className=\"App-tuning\"\n        value={tuning.name}\n        onChange={handleTuningChanged}\n      >\n        { TUNINGS.map((tuning, i) => <option key={i}>{tuning.name}</option>)}\n      </select>\n\n      <label className=\"App-show-octave\">\n        <input\n          type=\"checkbox\"\n          checked={showOctave}\n          onChange={() => update({ showOctave: !showOctave }) }\n        /> Show octave\n      </label>\n    </div>\n  )\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TUNINGS, Tuning } from './music';\nimport { newBoolArray } from './util';\nimport Fretboard, { Indicator } from './Fretboard';\nimport { SettingsContext } from './settings-context';\nimport Quiz from './Quiz';\nimport GuitarStrings from './GuitarStrings';\nimport Explorer from './Explorer';\nimport Settings from './Settings';\nimport { BrowserRouter as Router, Route, Link, NavLink, Redirect } from 'react-router-dom';\n\nconst fretCount = 15;\n\nconst App = () => {\n  const [tuning, setTuning] = useState(TUNINGS[0]);\n  const [showOctave, setShowOctave] = useState(true);\n  const [activeStrings, setActiveStrings] = useState(newBoolArray(tuning.notes.length));\n\n  const toggleGuitarString = (toToggle: number) => {\n    let value = [...activeStrings];\n    value[toToggle] = !value[toToggle];\n    setActiveStrings(value);\n  };\n\n  const updateSettings = (options: { showOctave?: boolean; tuning?: Tuning}) => {\n    if (typeof options.showOctave !== 'undefined') setShowOctave(options.showOctave);\n    if (options.tuning) setTuning(options.tuning);\n  }\n\n  const neck = (notes: Indicator[]) =>\n    <Fretboard\n      fretCount={fretCount}\n      tuning={tuning}\n      notes={notes}\n    >\n    <GuitarStrings\n      activeStrings={activeStrings}\n      onToggle={toggleGuitarString}\n    ></GuitarStrings>\n  </Fretboard>;\n  \n  return (\n    <Router>\n      <div className=\"App\">\n        <SettingsContext.Provider value={{ showOctave, tuning, fretCount, update: updateSettings }}>\n          <header className=\"App-header\">\n            <h1 className=\"App-title\">Fretfull</h1>\n            <nav className=\"App-nav\">\n              <NavLink exact to=\"/\">Explore</NavLink>\n              <NavLink to=\"/quiz\">Quiz</NavLink>\n            </nav>\n            <Settings></Settings>\n          </header>\n\n          <Route exact path=\"/\" render={() => <Redirect to=\"/explore/A/Major\" />}></Route>\n\n          <Route\n            exact\n            path=\"/explore/:chordRoot/:chordType\"\n            render={props => <Explorer content={neck} {...props}></Explorer>}\n          />\n\n          <Route\n            path=\"/quiz\"\n            render={() => \n              <Quiz\n                includedStrings={activeStrings}\n                content={neck}\n              ></Quiz>\n            }\n          />\n        </SettingsContext.Provider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}