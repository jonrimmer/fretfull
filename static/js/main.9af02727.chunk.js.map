{"version":3,"sources":["GuitarString.js","music.js","util.js","Fret.js","Fretboard.js","Note.js","voicing.js","App.js","serviceWorker.js","index.js"],"names":["GuitarString","_ref","includeInQuiz","rootNote","num","count","onToggle","width","Math","max","round","react_default","a","createElement","Fragment","key","onClick","className","style","gridArea","concat","tone","height","borderBottom","LETTER_TO_NUM","C","C#","Db","D","D#","Eb","E","F","F#","Gb","G","G#","Ab","A","A#","Bb","B","NUM_TO_LETTER","Note","octave","Object","classCallCheck","this","parseSpn","spn","length","parseInt","interval","note","start","result","addSemitones","semitones","Tuning","name","notes","map","createClass","value","join","TUNINGS","INTERVALS","Unison","MinorSecond","MajorSecond","MinorThird","MajorThird","PerfectFourth","PerfectFifth","MinorSixth","MajorSixth","MinorSeventh","Ocatve","CHORD_QUALITY","Major","short","long","Minor","Augmented","Diminished","named","Chord","quality","intervals","toConsumableArray","i","getRandomInt","floor","random","tmap","arr","callback","l","item","first","last","src_Fret","headSize","positionToGridArea","string","fret","src_Fretboard","_ref3","children","fretCount","tuning","_useMemo","useMemo","frets","remainingSize","size","push","computeFretSizes","gridColumns","_useMemo2","slicedToArray","fretSizes","columns","rows","_note","_ref2","gridRows","gridTemplateColumns","gridTemplateRows","typeClass","quiz","indicator","chordRoot","src_Note_0","label","type","showOctave","Voicings","arguments","undefined","tuningCache","Map","chord","voicingsCache","voicings","has","get","set","root","inversions","buildVoicing","rootNotes","current","unplaced","placed","_rootNotes","toArray","remaining","slice","unmuted","filter","n","min","apply","possibilities","_loop","newMin","newMax","_","i2","voicing","Voicing","bassNoteIndex","findIndex","addCurrent","sort","b","distance","createVoicings","_this","minFret","maxFret","reduce","App","_useState","useState","_useState2","appMode","setAppMode","_useState3","_useState4","setTuning","_useState5","_useState6","judgement","setJudgement","_useState7","_useState8","answer","setAnswer","_useState9","_useState10","setChordRoot","_useState11","_useState12","chordType","setChordType","_useState13","_useState14","setShowOctave","_useState15","len","val","newBoolArray","_useState16","includedStrings","setIncludedStrings","_useState17","_useState18","setNotes","_useState19","_useState20","voicingIndex","setVoicingIndex","computeRandomQuestion","strings","acc","positionToNote","_useState21","_useState22","question","setQuestion","allNotes","handleSubmit","event","solution","hasOwnProperty","correct","id","Date","now","preventDefault","showVoicing","index","minorChord","chordVoicings","getVoicings","played","forEach","checked","onChange","mode","e","find","target","assign","toToggle","toggleGuitarString","onSubmit","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9af02727.chunk.js","sourcesContent":["import React from 'react';\n\nconst MAX_STRING_WIDTH = 3;\n\nexport default ({includeInQuiz, rootNote, num, count, onToggle }) => {\n  const width = Math.max(1, Math.round(((count - (num + 1)) / count) * MAX_STRING_WIDTH));\n  \n  return <>\n    <div\n      key={ num }\n      onClick={onToggle}\n      className={'root-note ' + (includeInQuiz ? 'included' : 'excluded')}\n      style={{\n        gridArea: `s${ num + 1 } / fretboard-end`\n      }}\n    >{ rootNote.tone }</div>\n    <div\n      className=\"string\"\n      style = {{\n        height: '50%',\n        gridArea: `s${ num } / head / s${ num + 1 } / fretboard-end`,\n        borderBottom: `${ width }px solid yellow`\n      }}\n    ></div>\n  </>\n}","export const LETTER_TO_NUM = {\n  'C': 0,\n  'C#': 1,\n  'Db': 1,\n  'D': 2,\n  'D#': 3,\n  'Eb': 3,\n  'E': 4,\n  'F': 5,\n  'F#': 6,\n  'Gb': 6,\n  'G': 7,\n  'G#': 8,\n  'Ab': 8,\n  'A': 9,\n  'A#': 10,\n  'Bb': 10,\n  'B': 11\n};\n\nexport const NUM_TO_LETTER = [\n  'C',\n  'C#',\n  'D',\n  'D#',\n  'E',\n  'F',\n  'F#',\n  'G',\n  'G#',\n  'A',\n  'A#',\n  'B'\n];\n\nclass Note {\n  constructor(tone, octave) {\n    this.tone = tone;\n    this.octave = octave;\n  }\n\n  toString() {\n    return this.tone;\n  }\n\n  toSpn() {\n    return this.tone + this.octave;\n  }\n}\n\nexport function letterEquals(a, b) {\n  return LETTER_TO_NUM.hasOwnProperty(a) &&\n    LETTER_TO_NUM.hasOwnProperty(b) &&\n    LETTER_TO_NUM[a] === LETTER_TO_NUM[b];\n}\n\nexport function parseSpn(spn) {\n  if (typeof spn !== 'string') {\n    // This lets us safely call parseSpn on things that might already be note objects.\n    return spn;\n  }\n\n  if (spn.length === 3) {\n    return new Note(spn[0] + spn[1], parseInt(spn[2]));\n  }\n\n  return new Note(spn[0], parseInt(spn[1]));\n}\n\nexport function interval(note, tone) {\n  let start = LETTER_TO_NUM[parseSpn(note).tone]; // 9\n  let end = LETTER_TO_NUM[tone]; // 0\n\n  let result = end - start;\n\n  if (result < 0) {\n    result += 12;\n  }\n\n  return result;\n}\n\nexport function addSemitones(note, semitones) {\n  const num = LETTER_TO_NUM[note.tone];\n\n  let octave = note.octave;\n  let tone = num + (semitones % 12);\n\n  if (tone < 0) {\n    tone += 12;\n    octave--;\n  }\n  else if (tone >= 12) {\n    tone -= 12;\n    octave++;\n  }\n\n  octave += (semitones / 12) | 0;\n\n  return new Note(\n    NUM_TO_LETTER[tone],\n    octave\n  );\n}\n\nexport class Tuning {\n  constructor(name, notes) {\n    this.name = name;\n    this.notes = notes.map(parseSpn);\n  }\n\n  toString() {\n    return this.notes.join('-');\n  }\n}\n\nexport const TUNINGS = [\n  new Tuning('Standard', [\n    'E2', 'A2', 'D3', 'G3', 'B3', 'E4'\n  ]),\n  new Tuning('Open A', [\n    'E2', 'A2', 'C#3', 'E3', 'A3', 'E4'\n  ]),\n  new Tuning('Open B', [\n    'B2', 'F#2', 'B3', 'F#3', 'B3', 'D#4'\n  ]),\n  new Tuning('Open C', [\n    'C2', 'G2', 'C3', 'G3', 'C4', 'E4'\n  ]),\n  new Tuning('Open D', [\n    'D2', 'A2', 'D3', 'F#3', 'A3', 'D4'\n  ]),\n  new Tuning('Open E', [\n    'E2', 'B2', 'E3', 'G#3', 'B3', 'E4'\n  ]),\n  new Tuning('Open F', [\n    'F2', 'A2', 'C3', 'F3', 'C4', 'F4'\n  ]),\n  new Tuning('Open F#', [\n    'F#2', 'A#2', 'C#3', 'F#3', 'C#4', 'F#4'\n  ]),\n  new Tuning('Open G', [\n    'D2', 'G2', 'D3', 'G3', 'B3', 'D4'\n  ])\n];\n\nexport const INTERVALS = {\n  Unison: 0,\n  MinorSecond: 1,\n  MajorSecond: 2,\n  MinorThird: 3,\n  MajorThird: 4,\n  PerfectFourth: 5,\n  PerfectFifth: 7,\n  MinorSixth: 8,\n  MajorSixth: 9,\n  MinorSeventh: 11,\n  Ocatve: 12\n}\n\nexport const CHORD_QUALITY = {\n  Major: {\n    name: 'Major',\n    short: '',\n    long: 'maj'\n  },\n  Minor: {\n    name: 'Minor',\n    short: 'm',\n    long: 'min'\n  },\n  Augmented: {\n    name: 'Augmented',\n    short: '+',\n    long: 'aug'\n  },\n  Diminished: {\n    named: 'Diminished',\n    short: 'o'\n  }\n}\n\nclass Chord {\n  constructor(quality, rootNote, intervals) {\n    this.quality = quality;\n    this.notes = [\n      rootNote,\n      ...intervals.map(i => addSemitones(rootNote, i))\n    ];\n  }\n\n  shortName() {\n    return this.notes[0].tone + this.quality.short;\n  }\n\n  longName() {\n    return this.notes[0].tone + this.quality.long;\n  }\n\n  get rootNote() {\n    return this.notes[0];\n  }\n}\n\nexport function majorChord(rootNote) {\n  rootNote = parseSpn(rootNote);\n  return new Chord(CHORD_QUALITY.Major, rootNote, [INTERVALS.MajorThird, INTERVALS.PerfectFifth]);\n}\n\nexport function minorChord(rootNote) {\n  rootNote = parseSpn(rootNote);\n  return new Chord(CHORD_QUALITY.Minor, rootNote, [INTERVALS.MinorThird, INTERVALS.PerfectFifth]);\n}\n\n","export function newBoolArray(len, val = true) {\n  const result = [];\n\n  for (let i = 0; i  < len; i++) {\n    result.push(val);\n  }\n\n  return result;\n}\n\nexport function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function tmap(arr, callback) {\n  const l = arr.length;\n\n  return arr.map((item, i) =>\n    callback(item, i, {\n      first: i === 0,\n      last: i === (l - 1),\n      length: l\n    })\n  );\n}","import React from 'react';\nimport './Fret.css';\n\nfunction dots(i) {\n  return (i === 2 || i === 4 || i === 6 || i === 8) ? \n    <span className=\"dot single\"></span>\n  : (i === 11) ? \n    <>\n      <span className=\"dot double1\"></span><span className=\"dot double2\"></span\n    ></>\n  :\n    null;\n}\n\nexport default ({num}) =>\n  <>\n    <span\n      className=\"Fret-number\"\n      style={{\n        gridArea: `top / f${num}`\n      }}\n    >\n      { num + 1 }\n    </span>\n    <div\n      className=\"Fret\"\n      style={{\n        gridArea: `top-edge / f${num} / bottom-edge / f${num + 1}`\n      }}\n    >\n      { dots(num) }\n    </div>\n  </>;","import React, { useMemo } from 'react';\nimport { tmap } from './util';\nimport './Fretboard.css';\nimport Fret from './Fret';\n\nconst headSize = 100;\n\nexport const positionToGridArea = (string, fret) => `s${ string + 1 } / span 1 / s${string + 1} / f${ fret }`;\n\nexport const computeFretSizes = (fretCount) => {\n  const frets = [];\n  let remainingSize = 10;\n\n  for (let i = 0; i < fretCount; i++) {\n    const size = remainingSize / 17.817;\n    remainingSize = remainingSize - size;\n    frets.push(size);\n  }\n\n  return frets;\n}\n\nexport function gridColumns(frets) {\n  return '[start] auto [head] ' + headSize  + 'px ' + \n    tmap(frets, (size, i, { first, last }) =>\n      (first ? '[nut f0] ' : '') +\n      size + 'fr' +\n      ' [f' + (i + 1) + (last ? ' fretboard-end]' : ']')\n    ).join(' ') + ' auto [end]'\n}\n\nexport function gridRows(tuning) {\n  const l = tuning.notes.length;\n  return '[top] auto ' +\n    tmap(tuning.notes, (_note, i, { first }) =>\n      (first ? '[top-edge ' : '[') + 's' + (l - i) + '] 40px'\n    ).join(' ') + ' [bottom-edge s0]'\n}\n\nexport default function({children, fretCount, tuning}) {\n  const [\n    fretSizes,\n    columns,\n  ] = useMemo(() => {\n    const frets = computeFretSizes(fretCount);\n\n    return [\n      frets,\n      gridColumns(frets)\n    ]\n  }, [fretCount]);\n\n  const rows = useMemo(() => gridRows(tuning), [tuning]);\n\n  return <div\n    className=\"Fretboard\"\n    style={{\n      gridTemplateColumns: columns,\n      gridTemplateRows: rows\n    }}\n  >\n    <div\n      className=\"Fretboard-head\"\n      style={{\n        gridArea: `top-edge / head / bottom-edge / nut`\n      }}\n    >\n    </div>\n    <div\n      className=\"Fretboard-fingerboard\"\n      style={{\n        gridArea: `top-edge / nut / bottom-edge / fretboard-end`\n      }}\n    ></div>\n\n    { children }\n\n    {\n      fretSizes.map((size, i) =>\n        <Fret\n          key={i}\n          size={size}\n          num={i}\n        ></Fret>\n      )\n    }\n  </div>\n}\n","import React from 'react';\nimport './Note.css';\n\nconst typeClass = {\n  quiz: 'Note-quiz',\n  indicator: 'Note-indicator',\n  chordRoot: 'Note-chord-root'\n};\n\nexport default function({ note, type, showOctave, gridArea }) {\n  let label;\n  type = type || 'indicator';\n\n  if (type === 'quiz') {\n    label = '?'\n  }\n  else {\n    label = <span>{ note.tone }{ showOctave ? <sub>{ note.octave }</sub>: null }</span>\n  }\n\n  return <div\n    className={'Note ' + typeClass[type]}\n    style={{gridArea: gridArea}}\n  >\n    { label }\n  </div>\n}\n","import { interval, addSemitones } from './music';\n\nexport class Voicings {\n  tuningCache = new Map();\n\n  constructor(fretCount = 12) {\n    this.fretCount = fretCount;\n  }\n\n  getVoicings(tuning, chord) {\n    let voicingsCache;\n  \n    if (this.tuningCache.has(tuning)) {\n      voicingsCache = this.tuningCache.get(tuning);\n    }\n    else {\n      this.tuningCache.set(tuning, voicingsCache = new Map());\n    }\n  \n    let voicings;\n  \n    if (voicingsCache.has(chord)) {\n      voicings = voicingsCache.get(chord);\n    }\n    else {\n      voicingsCache.set(chord, voicings = createVoicings(tuning, chord, this.fretCount));\n    }\n  \n    return voicings;\n  }\n}\n\nclass Voicing {\n  constructor(notes) {\n    const unmuted = notes.filter(n => n !== null);\n    this.minFret = Math.min(...unmuted);\n    this.maxFret = Math.max(...unmuted);\n    this.distance = notes.reduce((a, b) => a + (b === null ? this.maxFret + 1 : b), 0);\n    this.notes = notes;\n  }\n}\n\nexport function createVoicings(tuning, chord, fretCount) {\n  const result = {\n    root: [],\n    inversions: []\n  };\n\n  function addCurrent(current) {\n    const voicing = new Voicing(current);\n\n    const bassNoteIndex = current.findIndex(n => n !== null);\n    const bassNote = addSemitones(tuning.notes[bassNoteIndex], current[bassNoteIndex]);\n    const inversion = bassNote.tone !== chord.notes[0].tone\n\n    if (inversion) {\n      result.inversions.push(voicing);\n    }\n    else {\n      result.root.push(voicing);\n    }\n  }\n\n  function buildVoicing(rootNotes, current, unplaced, placed) {\n    if (rootNotes.length === 0) {\n      if (unplaced.length === 0) {\n        addCurrent(current);\n      }\n\n      return;\n    }\n\n    const [rootNote, ...remaining] = rootNotes;\n    const unmuted = current.filter(n => n !== null);\n    const min = Math.min(...unmuted);\n    const max = Math.max(...unmuted);\n\n    let possibilities = 0;\n\n    for (let n = 0; n < unplaced.length; n++) {\n      const start = interval(rootNote, unplaced[n]);\n  \n      for(let i = start; i < fretCount + 1; i += 12) {\n        const newMin = Math.min(i, min);\n        const newMax = Math.max(i, max);\n\n        if (newMax - newMin > 4) {\n          continue;\n        }\n\n        buildVoicing(\n          remaining,\n          [...current, i],\n          unplaced.filter((_, i2) => i2 !== n),\n          [...placed, unplaced[n]]\n        );\n\n        possibilities++;\n      }\n    }\n\n    if (tuning.notes.length - current.length > unplaced.length) {\n      // It's still possible to include repeated notes / mutes while placing all unplaced notes.\n\n      for (let n = 0; n < placed.length; n++) {\n        const start = interval(rootNote, placed[n]);\n    \n        for(let i = start; i < fretCount + 1; i += 12) {\n          const newMin = Math.min(i, min);\n          const newMax = Math.max(i, max);\n  \n          if (newMax - newMin > 4) {\n            continue;\n          }\n\n          buildVoicing(\n            remaining,\n            [...current, i],\n            unplaced,\n            placed\n          );\n\n          possibilities++;\n        }\n      }\n\n      // We only consider muting if we can't find any valid note to play,\n      // or we haven't yet placed any note. This prevents adding lots of\n      // silly variations where we're just unncessarily muting each string\n      // in a given voicing.\n      if (possibilities === 0 || placed.length === 0) {\n        buildVoicing(\n          remaining,\n          [...current, null],\n          unplaced,\n          placed\n        );\n      }\n    }\n  }\n\n  buildVoicing(\n    tuning.notes,\n    [],\n    chord.notes,\n    []\n  );\n\n  result.root.sort((a, b) => a.distance - b.distance);\n  result.inversions.sort((a, b) => a.distance - b.distance);\n\n  return result;\n}","import React, { useState, useMemo } from 'react';\nimport GuitarString from './GuitarString';\nimport './App.css';\nimport { TUNINGS, addSemitones, letterEquals, majorChord, minorChord } from './music';\nimport { newBoolArray, getRandomInt } from './util';\nimport Fretboard, { positionToGridArea } from './Fretboard';\nimport Note from './Note';\nimport { Voicings } from './voicing';\n\nconst fretCount = 12;\n\nconst App = () => {\n  const [appMode, setAppMode] = useState('explore');\n  const [tuning, setTuning] = useState(TUNINGS[0]);\n  const [judgement, setJudgement] = useState(null);\n  const [answer, setAnswer] = useState('');\n  const [chordRoot, setChordRoot] = useState('A');\n  const [chordType, setChordType] = useState('Major');\n  const [showOctave, setShowOctave] = useState(true);\n  const [includedStrings, setIncludedStrings] = useState(newBoolArray(tuning.notes.length));\n  const voicings = useMemo(() => new Voicings(fretCount));\n  const [notes, setNotes] = useState([]);\n  const [voicingIndex, setVoicingIndex] = useState(0);\n\n  const computeRandomQuestion = (includedStrings) => {\n    const strings = includedStrings.reduce((acc, val, i) => {\n      if (val) {\n        acc.push(i);\n      }\n\n      return acc;\n    }, []);\n\n    return {\n      type: 'note',\n      string: strings[getRandomInt(strings.length)],\n      fret: getRandomInt(fretCount)\n    };\n  };\n\n  const positionToNote = (string, fret) => {\n    const rootNote = tuning.notes[string];\n    return addSemitones(rootNote, fret)\n  }\n\n  const [question, setQuestion] = useState(() => \n    computeRandomQuestion(includedStrings)\n  );\n\n  const allNotes = useMemo(() => {\n    const result = [];\n\n    for (let string = 0; string < tuning.notes.length; string++) {\n      for (let fret = 0; fret < fretCount + 1; fret++) {\n        result.push({\n          type: 'indicator',\n          note: positionToNote(string, fret),\n          gridArea: positionToGridArea(string, fret)\n        })\n      }\n    }\n\n    return result;\n  }, [tuning, showOctave]);\n\n  const handleSubmit = event => {\n    // Done late in case the tuning has changed.\n    const solution = positionToNote(question.string, question.fret);\n\n    if (letterEquals(answer, solution)) {\n      setQuestion(computeRandomQuestion(includedStrings));\n      \n      setJudgement({\n        correct: true,\n        id: Date.now()\n      });\n    }\n    else {\n      setJudgement({\n        correct: false,\n        id: Date.now()\n      });\n    }\n\n    setAnswer('');\n\n    event.preventDefault();\n  };\n\n  const handleTuningChanged = (e) => {\n    setTuning(TUNINGS.find(tuning => tuning.name === e.target.value) || tuning);\n  }\n\n  const toggleGuitarString = toToggle => {\n    let value = [...includedStrings];\n    value[toToggle] = !value[toToggle];\n    setIncludedStrings(value);\n\n    if (question.string === toToggle) {\n      setQuestion(computeRandomQuestion(value));\n    }\n  };\n\n  const showVoicing = index => {\n    const chord = chordType == 'Major' ? majorChord(chordRoot + '3') : minorChord(chordRoot + '3');\n    const chordVoicings = voicings.getVoicings(tuning, chord).root;\n\n    if (index < 0) {\n      index = 0;\n    }\n    else if (index >= chordVoicings.length) {\n      index = chordVoicings.length - 1;\n    }\n\n    const played = [];\n\n    chordVoicings[index].notes.forEach((fret, string) => {\n      let note = addSemitones(tuning.notes[string], fret);\n      if (fret !== null) {\n        played.push({\n          type: note.tone === chord.rootNote.tone ? 'chordRoot' : 'indicator',\n          note,\n          gridArea: positionToGridArea(string, fret)\n        });\n      }\n    });\n\n    setNotes(played);\n    setVoicingIndex(index);\n  }\n\n  const showChord = () => {\n    showVoicing(0);\n  };\n\n  const nextVoicing = () => {\n    showVoicing(voicingIndex + 1);\n  }\n\n  const prevVoicing = () => {\n    showVoicing(voicingIndex - 1);\n  }\n\n  const firstVoicing = () => {\n    showVoicing(Number.NEGATIVE_INFINITY);\n  }\n\n  const lastVoicing = () => {\n    showVoicing(Number.POSITIVE_INFINITY);\n  }\n\n  const switchAppMode = mode => {\n    setAppMode(mode);\n\n    if (mode === 'quiz') {\n      setNotes([{\n        note: positionToNote(question.string, question.fret),\n        type: 'quiz',\n        gridArea: positionToGridArea(question.string, question.fret)\n      }]);\n    }\n    else {\n      setNotes(allNotes);\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Guitar Quiz    \n      </header>\n      <div className=\"App-options\">\n        <label>\n          Mode\n        </label>\n        <label className=\"App-explore\">\n          <input\n            type=\"radio\"\n            value=\"explore\"\n            checked={appMode === 'explore'}\n            onChange={() => switchAppMode('explore')}\n          />\n            Explore\n        </label>\n        <label className=\"App-quiz\">\n          <input\n            type=\"radio\"\n            value=\"quiz\"\n            checked={appMode === 'quiz'}\n            onChange={() => setAppMode('quiz')}\n          />\n          Quiz\n        </label>\n\n        <label className=\"App-tuning\">Tuning</label>\n        <select\n          className=\"App-tuning\"\n          value={tuning.name}\n          onChange={handleTuningChanged}\n        >\n          { TUNINGS.map((tuning, i) => <option key={i}>{tuning.name}</option>)}\n        </select>\n\n        <label className=\"App-show-octave\">\n          <input\n            type=\"checkbox\"\n            checked={showOctave}\n            onChange={() => setShowOctave(!showOctave) }\n          /> Show octave\n        </label>\n      </div>\n      <Fretboard\n        fretCount={fretCount}\n        tuning={tuning}\n      >\n        {\n          notes.map((note, i) =>\n            <Note\n              key={i}\n              showOctave={showOctave}\n              {...note}\n            ></Note>\n          )\n        }\n\n        {\n          tuning.notes.map((rootNote, i, { length } ) =>\n            <GuitarString\n              key={i}\n              num={i}\n              count={length}\n              onToggle={() => toggleGuitarString(i)}\n              includeInQuiz={includedStrings[i]}\n              rootNote={rootNote}\n            ></GuitarString>\n          )\n        }\n      </Fretboard>\n\n      {\n        appMode === 'quiz' ? <form \n          className=\"App-question\"\n          onSubmit={event => handleSubmit(event)}\n        >\n          <h1>What is the higlighted note?</h1>\n          <input\n            className=\"App-answer-field\"\n            type=\"text\"\n            value={answer}\n            onChange={event => setAnswer(event.target.value)}\n          />\n          {\n            judgement ?\n              <div\n                className={'App-judgement ' + (judgement.correct ? 'correct' : 'incorrect') }\n                key={judgement.id}\n              >\n                { judgement.correct ? 'Correct' : 'Incorrect' }\n              </div> : null\n          }\n        </form> : <div className=\"chordSelector\">\n          <select\n            className=\"App-chord-root\"\n            value={chordRoot}\n            onChange={event => setChordRoot(event.target.value)}\n          >\n            <option>A</option>\n            <option>A#</option>\n            <option>B</option>\n            <option>C</option>\n            <option>C#</option>\n            <option>D</option>\n            <option>D#</option>\n            <option>E</option>\n            <option>F</option>\n            <option>F#</option>\n            <option>G</option>\n            <option>G#</option>\n          </select>\n          <select\n            className=\"App-chord-type\"\n            value={chordType}\n            onChange={event => setChordType(event.target.value)}\n          >\n            <option>Major</option>\n            <option>Minor</option>\n          </select>\n          <button onClick={showChord}>Chord</button>\n          <button onClick={firstVoicing}>|&lt;</button>\n          <button onClick={prevVoicing}>&lt;</button>\n          <button onClick={nextVoicing}>&gt;</button>\n          <button onClick={lastVoicing}>&gt;|</button>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}