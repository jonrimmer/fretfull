{"version":3,"sources":["Fret.js","GuitarString.js","music.js","util.js","App.js","serviceWorker.js","index.js"],"names":["Fret","_ref","num","dots","style","react_default","a","createElement","Fragment","className","gridArea","concat","GuitarString","includeInQuiz","rootNote","width","onToggle","key","onClick","letter","height","borderBottom","LETTER_TO_NUM","C","C#","Db","D","D#","Eb","E","F","F#","Gb","G","G#","Ab","A","A#","Bb","B","NUM_TO_LETTER","parseSpn","spn","length","octave","parseInt","TUNINGS","name","notes","map","getRandomInt","max","Math","floor","random","tmap","arr","callback","l","item","i","first","last","headSize","posToGrid","string","fret","App","frets","useMemo","fretCount","remainingSize","size","computeFrets","_useState","useState","_useState2","Object","slicedToArray","appMode","setAppMode","_useState3","_useState4","tuning","setTuning","_useState5","_useState6","judgement","setJudgement","_useState7","_useState8","answer","setAnswer","_useState9","len","val","arguments","undefined","result","push","newBoolArray","_useState10","includedStrings","setIncludedStrings","computeRandomQuestion","type","filter","incl","positionToNote","note","semitones","addSemitones","_useState11","_useState12","question","setQuestion","allNotes","cssClass","label","noteIndicators","handleSubmit","event","b","hasOwnProperty","correct","id","Date","now","preventDefault","value","checked","onChange","e","find","target","gridTemplateColumns","f","join","gridColumns","gridTemplateRows","_ref2","gridRows","_ref3","assign","_ref4","toToggle","toConsumableArray","toggleGuitarString","round","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.872cecb8.chunk.js","sourcesContent":["import React from 'react';\n\nexport const computeFrets = (fretCount) => {\n  const frets = [];\n  let remainingSize = 200;\n\n  for (let i = 0; i < fretCount; i++) {\n    const size = remainingSize / 17.817;\n    remainingSize = remainingSize - size;\n  \n    frets[i] = {\n      size: size,\n      num: i,\n      dots: 0\n    }\n  \n    if (i === 2 || i === 4 || i === 6 || i === 8) {\n      frets[i].dots = 1;\n    }\n    else if (i === 11) {\n      frets[i].dots = 2;\n    }\n  }\n\n  return frets;\n}\n\nexport default ({num, style, dots}) =>\n  <>\n    <span\n      className=\"fret-number\"\n      style={{\n        gridArea: `top / f${num}`\n      }}\n    >\n      { num + 1 }\n    </span>\n    <div\n      className=\"fret\"\n      style={{\n        gridArea: `top-edge / f${num} / bottom-edge / f${num + 1}`\n      }}\n    >\n      {\n        dots === 1 ? <span className=\"dot single\"></span> : null\n      }\n      {\n        dots === 2 ? <>\n          <span className=\"dot double1\"></span><span className=\"dot double2\"></span>\n        </> : null\n      }\n    </div>\n  </>;","import React from 'react';\n\nexport default ({includeInQuiz, rootNote, num, width, onToggle }) => {\n  return <>\n    <div\n      key={ num }\n      onClick={onToggle}\n      className={'root-note ' + (includeInQuiz ? 'included' : 'excluded')}\n      style={{\n        gridArea: `s${ num + 1 } / fretboard-end`\n      }}\n    >{ rootNote.letter }</div>\n    <div\n      className=\"string\"\n      style = {{\n        height: '50%',\n        gridArea: `s${ num } / head / s${ num + 1 } / fretboard-end`,\n        borderBottom: `${ width }px solid yellow`\n      }}\n    ></div>\n  </>\n}","const LETTER_TO_NUM = {\n  'C': 0,\n  'C#': 1,\n  'Db': 1,\n  'D': 2,\n  'D#': 3,\n  'Eb': 3,\n  'E': 4,\n  'F': 5,\n  'F#': 6,\n  'Gb': 6,\n  'G': 7,\n  'G#': 8,\n  'Ab': 8,\n  'A': 9,\n  'A#': 10,\n  'Bb': 10,\n  'B': 11\n};\n\nconst NUM_TO_LETTER = [\n  'C',\n  'C#',\n  'D',\n  'D#',\n  'E',\n  'F',\n  'F#',\n  'G',\n  'G#',\n  'A',\n  'A#',\n  'B'\n];\n\nexport function letterEquals(a, b) {\n  return LETTER_TO_NUM.hasOwnProperty(a) &&\n    LETTER_TO_NUM.hasOwnProperty(b) &&\n    LETTER_TO_NUM[a] === LETTER_TO_NUM[b];\n}\n\nexport function parseSpn(spn) {\n  if (spn.length === 3) {\n    return {\n      letter: spn[0] + spn[1],\n      octave: parseInt(spn[2])\n    };\n  }\n\n  return {\n    letter: spn[0],\n    octave: parseInt(spn[1])\n  };\n}\n\nexport function addSemitones(note, semitones) {\n  const num = LETTER_TO_NUM[note.letter];\n\n  let octave = note.octave;\n  let letter = num + (semitones % 12);\n\n  if (letter < 0) {\n    letter += 12;\n    octave--;\n  }\n  else if (letter >= 12) {\n    letter -= 12;\n    octave++;\n  }\n\n  octave += (semitones / 12) | 0;\n\n  return {\n    letter: NUM_TO_LETTER[letter],\n    octave\n  };\n}\n\nexport const TUNINGS = [\n  {\n    name: 'Standard',\n    notes: [\n      'E2', 'A2', 'D3', 'G3', 'B4', 'E4'\n    ].map(parseSpn)\n  }, {\n    name: 'Open A',\n    notes: [\n      'E2', 'A2', 'C#3', 'E3', 'A3', 'E4'\n    ].map(parseSpn)\n  }, {\n    name: 'Open B',\n    notes: [\n      'B2', 'F#2', 'B3', 'F#3', 'B3', 'D#4'\n    ].map(parseSpn)\n  }\n];\n","export function newBoolArray(len, val = true) {\n  const result = [];\n\n  for (let i = 0; i  < len; i++) {\n    result.push(val);\n  }\n\n  return result;\n}\n\nexport function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function tmap(arr, callback) {\n  const l = arr.length;\n\n  return arr.map((item, i) =>\n    callback(item, i, {\n      first: i === 0,\n      last: i === (l - 1),\n      length: l\n    })\n  );\n}","import React, { useState, useMemo } from 'react';\nimport Fret, { computeFrets} from './Fret';\nimport GuitarString from './GuitarString';\nimport './App.css';\nimport { TUNINGS, addSemitones, letterEquals } from './music';\nimport { newBoolArray, getRandomInt, tmap } from './util';\n\nconst headSize = 100;\nconst MAX_STRING_WIDTH = 3;\n\nconst posToGrid = (string, fret) => `s${ string + 1 } / span 1 / s${string + 1} / f${ fret }`;\n\nexport function gridColumns(frets) {\n  return '[start] auto [head] ' + headSize  + 'px ' + \n    tmap(frets, (f, i, { first, last }) =>\n      (first ? '[nut f0] ' : '') +\n      f.size + 'fr' +\n      ' [f' + (i + 1) + (last ? ' fretboard-end]' : ']')\n    ).join(' ') + ' auto [end]'\n}\n\nexport function gridRows(tuning) {\n  const l = tuning.notes.length;\n  return '[top] auto ' +\n    tmap(tuning.notes, (note, i, { first, last, length}) =>\n      (first ? '[top-edge ' : '[') + 's' + (l - i) + '] 1fr'\n    ).join(' ') + ' [bottom-edge s0]'\n}\n\nconst App = () => {\n  const frets = useMemo(() => computeFrets(12), []);\n  const [appMode, setAppMode] = useState('explore');\n  const [tuning, setTuning] = useState(TUNINGS[0]);\n  const [judgement, setJudgement] = useState(null);\n  const [answer, setAnswer] = useState('');\n  const [includedStrings, setIncludedStrings] = useState(newBoolArray(tuning.notes.length));\n\n  const computeRandomQuestion = (includedStrings) => ({\n    type: 'note',\n    string: getRandomInt(includedStrings.filter(incl => incl).length),\n    fret: getRandomInt(frets.length)\n  });\n\n  const positionToNote = (string, fret) => {\n    const rootNote = tuning.notes[tuning.notes.length - (string + 1)];\n    return addSemitones(rootNote, fret).letter;\n  }\n\n  const [question, setQuestion] = useState(() => \n    computeRandomQuestion(includedStrings)\n  );\n\n  const allNotes = useMemo(() => {\n    const result = [];\n\n    for (let string = 0; string < tuning.notes.length; string++) {\n      for (let fret = 0; fret < frets.length + 1; fret++) {\n        result.push({\n          cssClass: 'indicator',\n          label: positionToNote(string, fret),\n          gridArea: posToGrid(string, fret)\n        })\n      }\n    }\n\n    return result;\n  }, [tuning]);\n\n  let noteIndicators = [];\n\n  if (appMode === 'quiz') {\n    noteIndicators.push({\n      label: '?',\n      cssClass: 'question',\n      gridArea: posToGrid(question.string, question.fret)\n    })\n  }\n  else {\n    noteIndicators = allNotes;\n  }\n\n  const handleSubmit = event => {\n\n    if (letterEquals(question.answer, answer)) {\n      setQuestion(computeRandomQuestion());\n      \n      setJudgement({\n        correct: true,\n        id: Date.now()\n      });\n    }\n    else {\n      setJudgement({\n        correct: false,\n        id: Date.now()\n      });\n    }\n\n    setAnswer('');\n\n    event.preventDefault();\n  };\n\n  const handleTuningChanged = (e) => {\n    setTuning(TUNINGS.find(tuning => tuning.name === e.target.value) || tuning);\n  }\n\n  const toggleGuitarString = toToggle => {\n    let value = [...includedStrings];\n    value[toToggle] = !value[toToggle];\n    setIncludedStrings(value);\n\n    if (question.string.num === toToggle) {\n      setQuestion(computeRandomQuestion(value));\n    }\n  };\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Guitar Quiz\n\n        <div className=\"App-options\">\n          <label>\n            <input\n              type=\"radio\"\n              value=\"explore\"\n              checked={appMode === 'explore'}\n              onChange={() => setAppMode('explore')}\n            />\n              Explore\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"quiz\"\n              checked={appMode === 'quiz'}\n              onChange={() => setAppMode('quiz')}\n            />\n            Quiz\n          </label>\n        </div>\n\n        <select\n          value={tuning.name}\n          onChange={handleTuningChanged}\n        >\n          { TUNINGS.map((tuning, i) => <option key={i}>{tuning.name}</option>)}\n        </select>\n        \n      </header>\n      <div\n        className=\"App-fretboard\"\n        style={{\n          gridTemplateColumns: gridColumns(frets),\n          gridTemplateRows: gridRows(tuning)\n        }}\n      >\n        <div\n          className=\"head\"\n          style={{\n            gridArea: `top-edge / head / bottom-edge / nut`\n          }}\n        >\n        </div>\n        <div\n          className=\"fingerboard\"\n          style={{\n            gridArea: `top-edge / nut / bottom-edge / fretboard-end`\n          }}\n        ></div>\n\n        {\n          noteIndicators.map(({gridArea, label, cssClass}, i) =>\n            <div\n              key={i}\n              className={'note ' + cssClass}\n              style={{ gridArea }}\n            >\n              { label }\n            </div>\n           )\n        }\n\n        {\n          frets.map((fret, i) =>\n            <Fret key={i} {...fret}></Fret>\n          )\n        }\n        \n        {\n          tuning.notes.map((rootNote, i, { length } ) =>\n            <GuitarString\n              key={i}\n              num={i}\n              onToggle={() => toggleGuitarString(i)}\n              includeInQuiz={includedStrings[i]}\n              rootNote={rootNote}\n              width={ Math.max(1, Math.round(((length - (i + 1)) / length) * MAX_STRING_WIDTH)) }\n            ></GuitarString>\n          )\n        }\n      </div>\n\n      {\n        appMode === 'quiz' ? <form \n          className=\"App-question\"\n          onSubmit={event => handleSubmit(event)}\n        >\n          <h1>What is the higlighted note?</h1>\n          <input\n            className=\"App-answer-field\"\n            type=\"text\"\n            value={answer}\n            onChange={event => setAnswer(event.target.value)}\n          />\n          {\n            judgement ?\n              <div\n                className={'App-judgement ' + (judgement.correct ? 'correct' : 'incorrect') }\n                key={judgement.id}\n              >\n                { judgement.correct ? 'Correct' : 'Incorrect' }\n              </div> : null\n          }\n      </form> : null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}