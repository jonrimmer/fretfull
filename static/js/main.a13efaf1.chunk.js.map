{"version":3,"sources":["util.ts","Fret.styles.tsx","Fret.tsx","NoteIndicator.styles.ts","NoteIndicator.tsx","Fretboard.styles.tsx","music/note.ts","music/chord.ts","music/tuning.ts","settingsStore.ts","voicing.ts","chordsStore.ts","rootStore.tsx","Fretboard.tsx","Quiz.styles.ts","Quiz.tsx","GuitarStrings.styles.tsx","GuitarStrings.tsx","Listbox.styles.ts","Listbox.tsx","ChordsExplorer.styles.tsx","ChordsExplorer.tsx","Settings.styles.ts","Settings.tsx","App.styles.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["getRandomInt","max","Math","floor","random","tmap","arr","callback","l","length","map","item","i","first","last","FretContainer","styled","div","FretNumber","span","Fret","num","style","gridArea","className","NoteIndicatorWrapper","type","css","NoteIndicator","note","showOctave","label","tone","octave","FretboardHead","Fingerboard","FretboardContainer","LETTER_TO_NUM","C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B","NUM_TO_LETTER","INTERVALS","Note","constructor","toString","this","toSpn","toneEquals","equals","parseSpn","spn","parseInt","interval","start","result","addSemitones","semitones","Chord","rootNote","intervals","notes","shortName","longName","root","third","fifth","seventh","Intervals","PerfectFifth","MajorThird","MinorSeventh","MajorSeventh","MinorThird","Tritone","MajorSixth","MinorSixth","Tuning","name","join","positionToNote","string","fret","TUNINGS","SettingsStore","observable","Voicing","bassNote","minFret","maxFret","distance","strValue","unmuted","filter","n","min","reduce","a","b","some","n1","createVoicings","tuning","required","optional","fretCount","buildVoicing","openNotes","current","unplaced","placed","bassNoteIndex","findIndex","voicing","push","addCurrent","openNote","remaining","possibilities","newMin","_","i2","forEach","sort","ChordRoot","value","ChordRoots","chordTypes","chordTypeKeys","Object","keys","ChordParts","ChordsStore","computed","keepAlive","settings","autorun","index","chordVoicings","v","voicingIndex","isSeventh","chord","chordNotes","replace","status","find","cr","chordRootValue","chordType","chordRoot","played","positionToGridArea","showVoicing","updateChordNote","action","RootStore","settingsStore","chordsStore","RootStoreContext","createContext","useSettings","useContext","gridColumns","frets","size","observer","children","useMemo","remainingSize","computeFretSizes","fretSizes","columns","rows","_note","gridRows","gridTemplateColumns","gridTemplateRows","key","_size","QuizWrapper","QuizQuestion","form","AnswerField","input","bgToGray","keyframes","Judgement","correct","computeRandomQuestion","includedStrings","strings","acc","val","useState","answer","setAnswer","judgement","setJudgement","question","setQuestion","handleSubmit","e","solution","hasOwnProperty","id","Date","now","preventDefault","onSubmit","event","onChange","target","GuitarString","RootNote","activeStrings","onToggle","width","round","onClick","height","borderBottom","ListboxWrapper","ul","ListboxOption","li","selected","Listbox","React","memo","options","onSelect","ulEl","useRef","selectedOptionIndex","option","activeDescendant","undefined","focusFirstItem","useEffect","scrollHeight","clientHeight","element","querySelector","scrollBottom","scrollTop","elementBottom","offsetTop","offsetHeight","ref","role","onFocus","onKeyDown","evt","document","getElementById","tabIndex","aria-activedescendant","o","aria-selected","ChordsExplorerContainer","chords","history","useHistory","useParams","decodeURIComponent","chordTypeValue","encodeURIComponent","update","currentTarget","Fragment","checked","indexOf","SettingsWrapper","Settings","htmlFor","AppContainer","AppHeader","header","AppTitle","h1","AppNav","nav","len","newBoolArray","setActiveStrings","toggleGuitarString","toToggle","fretboard","to","exact","path","render","props","Boolean","window","location","hostname","match","ReactDOM","Provider","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a13efaf1.chunk.js","sourcesContent":["export function newBoolArray(len: number, val = true): boolean[] {\n  const result = [];\n\n  for (let i = 0; i < len; i++) {\n    result.push(val);\n  }\n\n  return result;\n}\n\nexport function getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function tmap<T>(\n  arr: T[],\n  callback: (\n    item: T,\n    index: number,\n    props: { first: boolean; last: boolean; length: number }\n  ) => void\n) {\n  const l = arr.length;\n\n  return arr.map((item, i) =>\n    callback(item, i, {\n      first: i === 0,\n      last: i === l - 1,\n      length: l,\n    })\n  );\n}\n\nexport function isStringArray(value: any): value is string[] {\n  if (\n    value instanceof Array &&\n    (value.length === 0 || typeof value[0] === 'string')\n  ) {\n    return true;\n  }\n\n  return false;\n}\n","import styled from 'styled-components';\n\nexport const FretContainer = styled.div`\n  border-right: 3px solid #ccc;\n  position: relative;\n\n  .dot {\n    display: block;\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: #888;\n    position: absolute;\n    left: calc(50% - 10px);\n  }\n\n  .dot.single {\n    top: calc(50% - 10px);\n  }\n\n  .dot.double1 {\n    top: calc(25% - 10px);\n  }\n\n  .dot.double2 {\n    top: calc(75% - 10px);\n  }\n`;\n\nexport const FretNumber = styled.span`\n  display: block;\n  justify-self: center;\n  margin: 6px;\n`;\n","import React, { ReactNode, FC } from 'react';\nimport { FretContainer, FretNumber } from './Fret.styles';\n\nfunction dots(i: number): ReactNode {\n  return i === 2 || i === 4 || i === 6 || i === 8 || i === 14 ? (\n    <span className=\"dot single\"></span>\n  ) : i === 11 ? (\n    <>\n      <span className=\"dot double1\"></span>\n      <span className=\"dot double2\"></span>\n    </>\n  ) : null;\n}\n\ninterface FretProps {\n  num: number;\n}\n\nconst Fret: FC<FretProps> = ({ num }) => (\n  <>\n    <FretNumber\n      style={{\n        gridArea: `top / f${num}`,\n      }}\n    >\n      {num + 1}\n    </FretNumber>\n    <FretContainer\n      style={{\n        gridArea: `top-edge / f${num} / bottom-edge / f${num + 1}`,\n      }}\n    >\n      {dots(num)}\n    </FretContainer>\n  </>\n);\n\nexport default Fret;\n","import styled, { css } from 'styled-components';\nimport { NoteIndicatorType } from './model';\n\nexport const NoteIndicatorWrapper = styled.div<{ type: NoteIndicatorType }>`\n  z-index: 20;\n  display: block;\n  align-self: center;\n  justify-self: center;\n  border-radius: 8px;\n  height: 30px;\n  padding: 0 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n\n  ${({ type }) => {\n    switch (type) {\n      case 'chordRoot': {\n        return css`\n          background-color: rgb(66, 201, 97);\n        `;\n      }\n      case 'indicator': {\n        return css`\n          background-color: #75ced8;\n        `;\n      }\n      case 'quiz': {\n        return css`\n          background-color: #00fdff;\n          z-index: 30;\n        `;\n      }\n    }\n  }}\n`;\n","import React, { FC } from 'react';\nimport { Note } from './music';\nimport { NoteIndicatorType } from './model';\nimport { NoteIndicatorWrapper } from './NoteIndicator.styles';\n\ninterface NoteIndicatorProps {\n  note: Note;\n  type: NoteIndicatorType;\n  showOctave: boolean;\n  gridArea: string;\n}\n\nconst NoteIndicator: FC<NoteIndicatorProps> = ({\n  note,\n  type,\n  showOctave,\n  gridArea,\n}) => {\n  let label;\n  type = type || 'indicator';\n\n  if (type === 'quiz') {\n    label = '?';\n  } else {\n    label = (\n      <span>\n        {note.tone}\n        {showOctave ? <sub>{note.octave}</sub> : null}\n      </span>\n    );\n  }\n\n  return (\n    <NoteIndicatorWrapper type={type} style={{ gridArea: gridArea }}>\n      {label}\n    </NoteIndicatorWrapper>\n  );\n};\n\nexport default NoteIndicator;\n","import styled from 'styled-components';\n\nexport const FretboardHead = styled.div`\n  grid-area: top-edge / head / bottom-edge / nut;\n`;\n\nexport const Fingerboard = styled.div`\n  grid-area: top-edge / nut / bottom-edge / fretboard-end;\n`;\n\nexport const FretboardContainer = styled.div`\n  grid-area: fretboard;\n  display: grid;\n  margin: 0 12px;\n\n  ${Fingerboard} {\n    background: linear-gradient(to bottom, #493b19 0%, #331d0c 100%);\n  }\n\n  ${FretboardHead} {\n    background-color: #222;\n    border-right: 4px solid #ddd;\n  }\n`;\n","export const LETTER_TO_NUM: { [tone: string]: number } = {\n  C: 0,\n  'C#': 1,\n  Db: 1,\n  D: 2,\n  'D#': 3,\n  Eb: 3,\n  E: 4,\n  F: 5,\n  'F#': 6,\n  Gb: 6,\n  G: 7,\n  'G#': 8,\n  Ab: 8,\n  A: 9,\n  'A#': 10,\n  Bb: 10,\n  B: 11,\n};\n\nexport const NUM_TO_LETTER = [\n  'C',\n  'C#',\n  'D',\n  'D#',\n  'E',\n  'F',\n  'F#',\n  'G',\n  'G#',\n  'A',\n  'A#',\n  'B',\n];\n\nexport enum INTERVALS {\n  Unison = 0,\n  MinorSecond = 1,\n  MajorSecond = 2,\n  MinorThird = 3,\n  MajorThird = 4,\n  PerfectFourth = 5,\n  Tritone = 6,\n  PerfectFifth = 7,\n  MinorSixth = 8,\n  MajorSixth = 9,\n  MinorSeventh = 10,\n  MajorSeventh = 11,\n  Octave = 12,\n}\n\nexport class Note {\n  constructor(public tone: string, public octave: number) {}\n\n  toString(): string {\n    return this.tone;\n  }\n\n  toSpn(): string {\n    return this.tone + this.octave;\n  }\n\n  toneEquals(note: Note): boolean {\n    return LETTER_TO_NUM[this.tone] === LETTER_TO_NUM[note.tone];\n  }\n\n  equals(note: Note): boolean {\n    return this.toneEquals(note) && this.octave === note.octave;\n  }\n}\n\nexport function toneEquals(a: string, b: string): boolean {\n  return (\n    LETTER_TO_NUM.hasOwnProperty(a) &&\n    LETTER_TO_NUM.hasOwnProperty(b) &&\n    LETTER_TO_NUM[a] === LETTER_TO_NUM[b]\n  );\n}\n\nexport function parseSpn(spn: string | Note): Note {\n  if (typeof spn !== 'string') {\n    // This lets us safely call parseSpn on things that might already be note objects.\n    return spn;\n  }\n\n  if (spn.length === 3) {\n    return new Note(spn[0] + spn[1], parseInt(spn[2]));\n  }\n\n  return new Note(spn[0], parseInt(spn[1]));\n}\n\nexport function interval(note: Note, tone: string): number {\n  let start = LETTER_TO_NUM[parseSpn(note).tone]; // 9\n  let end = LETTER_TO_NUM[tone]; // 0\n\n  let result = end - start;\n\n  if (result < 0) {\n    result += 12;\n  }\n\n  return result;\n}\n\nexport function addSemitones(note: Note, semitones: number) {\n  const num = LETTER_TO_NUM[note.tone];\n\n  let octave = note.octave;\n  let tone = num + (semitones % 12);\n\n  if (tone < 0) {\n    tone += 12;\n    octave--;\n  } else if (tone >= 12) {\n    tone -= 12;\n    octave++;\n  }\n\n  octave += (semitones / 12) | 0;\n\n  return new Note(NUM_TO_LETTER[tone], octave);\n}\n","import { Note, parseSpn, addSemitones, INTERVALS as Intervals } from './note';\n\nexport class Chord {\n  public readonly notes: Note[];\n  public readonly shortName: string;\n  public readonly longName: string;\n\n  constructor(rootNote: Note | string, intervals: number[]) {\n    let root = (rootNote = parseSpn(rootNote));\n    this.notes = [root, ...intervals.map(i => addSemitones(root, i))];\n\n    const [third, fifth, seventh] = intervals;\n\n    let shortName = root.tone;\n    let longName = root.tone;\n\n    // Naming logic as per:\n    // https://en.wikipedia.org/wiki/Chord_names_and_symbols_(popular_music)\n\n    switch (fifth) {\n      case Intervals.PerfectFifth:\n        switch (third) {\n          case Intervals.MajorThird:\n            switch (seventh) {\n              case Intervals.MinorSeventh:\n                shortName += 'm7';\n                longName += 'min7';\n                break;\n              case Intervals.MajorSeventh:\n            }\n            break;\n          case Intervals.MinorThird:\n            shortName += 'm';\n            longName += 'min';\n\n            switch (seventh) {\n              case Intervals.MinorSeventh:\n                shortName += '7';\n                longName += '7';\n                break;\n              case Intervals.MajorSeventh:\n                shortName += '/m7';\n                longName += '/maj7';\n                break;\n            }\n            break;\n        }\n        break;\n      case Intervals.Tritone:\n        if (seventh) {\n          switch (third) {\n            case Intervals.MajorThird:\n              switch (seventh) {\n                case Intervals.MinorSeventh:\n                  shortName += '7♭5';\n                  longName += '7dim5';\n                  break;\n              }\n              break;\n            case Intervals.MinorThird:\n              switch (seventh) {\n                case Intervals.MinorSeventh:\n                  shortName += 'ø7';\n                  longName += 'ø7';\n                  break;\n                case Intervals.MajorSixth:\n                  shortName += '°7';\n                  longName += 'dim7';\n                  break;\n              }\n              break;\n          }\n        } else {\n          shortName += '°';\n          longName += 'dim';\n        }\n        break;\n      case Intervals.MinorSixth:\n        shortName += '+';\n        longName += 'aug';\n\n        switch (seventh) {\n          case Intervals.MinorSeventh:\n            shortName += '7';\n            longName += '7';\n            break;\n          case Intervals.MajorSeventh:\n            shortName += '/m7';\n            longName += '/maj7';\n            break;\n        }\n        break;\n    }\n\n    this.shortName = shortName;\n    this.longName = longName;\n  }\n\n  get rootNote(): Note {\n    return this.notes[0];\n  }\n}\n\nexport function majorTriad(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [Intervals.MajorThird, Intervals.PerfectFifth]);\n}\n\nexport function minorTriad(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [Intervals.MinorThird, Intervals.PerfectFifth]);\n}\n\nexport function diminishedTriad(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [Intervals.MinorThird, Intervals.Tritone]);\n}\n\nexport function majorSixth(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MajorThird,\n    Intervals.PerfectFifth,\n    Intervals.MajorSixth,\n  ]);\n}\n\nexport function dominantSeventh(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MajorThird,\n    Intervals.PerfectFifth,\n    Intervals.MinorSeventh,\n  ]);\n}\n\nexport function majorSeventh(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MajorThird,\n    Intervals.PerfectFifth,\n    Intervals.MajorSeventh,\n  ]);\n}\n\nexport function augmentedTriad(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [Intervals.MajorThird, Intervals.MinorSixth]);\n}\n\nexport function augmentedSeventh(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MajorThird,\n    Intervals.MinorSixth,\n    Intervals.MinorSeventh,\n  ]);\n}\n\nexport function minorSixth(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MinorThird,\n    Intervals.PerfectFifth,\n    Intervals.MajorSixth,\n  ]);\n}\n\nexport function minorSeventh(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MinorThird,\n    Intervals.PerfectFifth,\n    Intervals.MinorSeventh,\n  ]);\n}\n\nexport function seventh(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MajorThird,\n    Intervals.PerfectFifth,\n    Intervals.MinorSeventh,\n  ]);\n}\n\nexport function minorMajorSeventh(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MinorThird,\n    Intervals.PerfectFifth,\n    Intervals.MajorSeventh,\n  ]);\n}\n\nexport function diminishedSeventh(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MinorThird,\n    Intervals.Tritone,\n    Intervals.MajorSixth,\n  ]);\n}\n\nexport function halfDiminishedSeventh(rootNote: Note | string): Chord {\n  return new Chord(rootNote, [\n    Intervals.MinorThird,\n    Intervals.Tritone,\n    Intervals.MinorSeventh,\n  ]);\n}\n","import { Note, parseSpn, addSemitones } from './note';\n\nexport class Tuning {\n  notes: Note[];\n\n  constructor(public name: string, notes: string[]) {\n    this.notes = notes.map(parseSpn);\n  }\n\n  toString(): string {\n    return this.notes.join('-');\n  }\n\n  positionToNote(string: number, fret: number) {\n    const rootNote = this.notes[string];\n    return addSemitones(rootNote, fret);\n  }\n}\n\nexport const TUNINGS = [\n  new Tuning('Standard', ['E2', 'A2', 'D3', 'G3', 'B3', 'E4']),\n  new Tuning('Open A', ['E2', 'A2', 'C#3', 'E3', 'A3', 'E4']),\n  new Tuning('Open B', ['B2', 'F#2', 'B3', 'F#3', 'B3', 'D#4']),\n  new Tuning('Open C', ['C2', 'G2', 'C3', 'G3', 'C4', 'E4']),\n  new Tuning('Open D', ['D2', 'A2', 'D3', 'F#3', 'A3', 'D4']),\n  new Tuning('Open E', ['E2', 'B2', 'E3', 'G#3', 'B3', 'E4']),\n  new Tuning('Open F', ['F2', 'A2', 'C3', 'F3', 'C4', 'F4']),\n  new Tuning('Open F#', ['F#2', 'A#2', 'C#3', 'F#3', 'C#4', 'F#4']),\n  new Tuning('Open G', ['D2', 'G2', 'D3', 'G3', 'B3', 'D4']),\n];\n","import { observable } from 'mobx';\nimport { Tuning, TUNINGS } from './music';\n\nexport class SettingsStore {\n  @observable tuning: Tuning = TUNINGS[0];\n  @observable fretCount: number = 14;\n  @observable showOctave = false;\n}\n","import { interval, addSemitones, Tuning, Chord, Note } from './music';\n\nexport class Voicings {\n  tuningCache = new Map<Tuning, Map<Chord, Voicing[]>>();\n\n  constructor(public fretCount = 12) {}\n\n  getVoicings(tuning: Tuning, chord: Chord): Voicing[] {\n    let voicingsCache = this.tuningCache.get(tuning);\n\n    if (!voicingsCache) {\n      this.tuningCache.set(tuning, (voicingsCache = new Map()));\n    }\n\n    let voicings = voicingsCache.get(chord);\n\n    if (!voicings) {\n      voicingsCache.set(\n        chord,\n        (voicings = createVoicings(tuning, chord.notes, [], this.fretCount))\n      );\n    }\n\n    return voicings;\n  }\n}\n\ninterface ChordVoicings {\n  root: Voicing[];\n  inversions: Voicing[];\n}\n\ntype VoicingNotes = (number | null)[];\n\nexport class Voicing {\n  minFret: number;\n  maxFret: number;\n  distance: number;\n  private strValue: string;\n\n  constructor(public notes: VoicingNotes, public bassNote: Note) {\n    const unmuted = notes.filter((n) => n !== null) as number[];\n    this.minFret = Math.min(...unmuted);\n    this.maxFret = Math.max(...unmuted);\n    this.distance = notes.reduce<number>(\n      (a, b) => a + (b === null ? this.maxFret + 1 : b),\n      0\n    );\n    this.notes = notes;\n    this.strValue = this.notes.map((n) => (n === null ? 'x' : n)).join(' ');\n  }\n\n  toString() {\n    return this.strValue;\n  }\n\n  equals({ notes }: Voicing) {\n    if (this.notes.length !== notes.length) {\n      return false;\n    }\n\n    return !this.notes.some((n1, i) => notes[i] !== n1);\n  }\n}\n\nexport function createVoicings(\n  tuning: Tuning,\n  required: Note[],\n  optional: Note[] = [],\n  fretCount: number\n): Voicing[] {\n  const result: Voicing[] = [];\n\n  if (required.length === 0 && optional.length === 0) {\n    return [];\n  }\n\n  function addCurrent(current: VoicingNotes) {\n    const bassNoteIndex = current.findIndex((n) => n !== null) as number;\n    const bassNote = addSemitones(\n      tuning.notes[bassNoteIndex],\n      current[bassNoteIndex] as number\n    );\n    const voicing = new Voicing(current, bassNote);\n\n    result.push(voicing);\n  }\n\n  function buildVoicing(\n    openNotes: Note[],\n    current: (number | null)[],\n    unplaced: Note[],\n    placed: Note[]\n  ) {\n    if (openNotes.length === 0) {\n      if (unplaced.length === 0) {\n        addCurrent(current);\n      }\n\n      return;\n    }\n\n    const [openNote, ...remaining] = openNotes;\n    const unmuted = current.filter((n) => n !== null) as number[];\n    const min = Math.min(...unmuted);\n    const max = Math.max(...unmuted);\n\n    let possibilities = 0;\n\n    for (let n = 0; n < unplaced.length; n++) {\n      const start = interval(openNote, unplaced[n].toString());\n\n      for (let i = start; i < fretCount + 1; i += 12) {\n        const newMin = Math.min(i, min);\n        const newMax = Math.max(i, max);\n\n        if (newMax - newMin > 4) {\n          continue;\n        }\n\n        buildVoicing(\n          remaining,\n          [...current, i],\n          unplaced.filter((_, i2) => i2 !== n),\n          [...placed, unplaced[n]]\n        );\n\n        possibilities++;\n      }\n    }\n\n    if (tuning.notes.length - current.length > unplaced.length) {\n      // It's still possible to include repeated and optional notes / mutes\n      // while placing all unplaced required notes.\n\n      [...placed, ...optional].forEach((n) => {\n        const start = interval(openNote, n.toString());\n\n        for (let i = start; i < fretCount + 1; i += 12) {\n          const newMin = Math.min(i, min);\n          const newMax = Math.max(i, max);\n\n          if (newMax - newMin > 4) {\n            continue;\n          }\n\n          buildVoicing(remaining, [...current, i], unplaced, placed);\n\n          possibilities++;\n        }\n      });\n\n      // We only consider muting if we can't find any valid note to play,\n      // or we haven't yet placed any note. This prevents adding lots of\n      // silly variations where we're just unncessarily muting each string\n      // in a given voicing.\n      if (possibilities === 0 || placed.length === 0) {\n        buildVoicing(remaining, [...current, null], unplaced, placed);\n      }\n    }\n  }\n\n  buildVoicing(tuning.notes, [], required, []);\n\n  result.sort((a, b) => a.distance - b.distance);\n\n  return result;\n}\n","import { observable, computed, autorun, action, IObservableArray } from 'mobx';\nimport {\n  Note,\n  Chord,\n  majorTriad,\n  minorTriad,\n  augmentedTriad,\n  diminishedTriad,\n  majorSixth,\n  minorSixth,\n  seventh,\n  majorSeventh,\n  minorSeventh,\n  augmentedSeventh,\n  diminishedSeventh,\n  halfDiminishedSeventh,\n  minorMajorSeventh,\n  addSemitones,\n} from './music';\nimport { createVoicings } from './voicing';\nimport { SettingsStore } from './settingsStore';\nimport { Indicator, positionToGridArea } from './Fretboard';\n\nclass ChordRoot {\n  private label: string;\n\n  constructor(public value: any, label?: string) {\n    this.label = label || this.value.toString();\n  }\n\n  toString() {\n    return this.label;\n  }\n}\n\nexport const ChordRoots = [\n  new ChordRoot('A'),\n  new ChordRoot('A#', 'A# / Db'),\n  new ChordRoot('B'),\n  new ChordRoot('C'),\n  new ChordRoot('C#', 'C# / Db'),\n  new ChordRoot('D'),\n  new ChordRoot('D#', 'D# / Eb'),\n  new ChordRoot('E'),\n  new ChordRoot('F'),\n  new ChordRoot('F#', 'F# / Gb'),\n  new ChordRoot('G'),\n  new ChordRoot('G#', 'G# / Ab'),\n];\n\nconst chordTypes: { [key: string]: (note: Note | string) => Chord } = {\n  'Major triad': majorTriad,\n  'Minor triad': minorTriad,\n  'Augmented triad': augmentedTriad,\n  'Diminished triad': diminishedTriad,\n  'Major 6th': majorSixth,\n  'Minor 6th': minorSixth,\n  '7th': seventh,\n  'Major 7th': majorSeventh,\n  'Minor 7th': minorSeventh,\n  'Augmented 7th': augmentedSeventh,\n  'Diminished 7th': diminishedSeventh,\n  'Half-diminished 7th': halfDiminishedSeventh,\n  'Minor-major 7th': minorMajorSeventh,\n};\n\nexport const chordTypeKeys = Object.keys(chordTypes);\n\nconst ChordParts = ['Root', '3rd', '5th', '7th'];\n\nexport type ChordNoteStatus = 'Optional' | 'Required' | 'Omitted' | 'Bass';\n\ninterface ChordNote {\n  note: Note;\n  label: string;\n  status: ChordNoteStatus;\n}\n\nclass ChordsStore {\n  constructor(private settings: SettingsStore) {\n    autorun(() => {\n      if (this.voicing !== null) {\n        const voicing = this.voicing;\n        let index = this.chordVoicings.findIndex((v) => v.equals(voicing));\n\n        if (index === -1) {\n          this.voicingIndex = index;\n        }\n      }\n    });\n\n    autorun(() => {\n      const isSeventh = this.chord.notes.length > 3;\n\n      this.chordNotes.replace(\n        this.chord.notes.map<ChordNote>((note, i) => ({\n          note,\n          label: note.toString() + ' (' + ChordParts[i] + ')',\n          status:\n            i === 0 ? 'Bass' : i === 2 && isSeventh ? 'Optional' : 'Required',\n        }))\n      );\n    });\n  }\n\n  @observable chordRootValue: string = 'A';\n  @observable chordType: string = 'Major triad';\n  @observable chordNotes: IObservableArray<ChordNote> = observable([]);\n\n  @computed({ keepAlive: true }) get chordRoot() {\n    return (\n      ChordRoots.find((cr) => cr.value === this.chordRootValue) || ChordRoots[0]\n    );\n  }\n\n  @computed({ keepAlive: true }) get chord() {\n    return chordTypes[this.chordType](this.chordRoot.value + '3');\n  }\n\n  @computed({ keepAlive: true }) get chordVoicings() {\n    let result = createVoicings(\n      this.settings.tuning,\n      this.chordNotes\n        .filter((n) => n.status === 'Bass' || n.status === 'Required')\n        .map((n) => n.note),\n      this.chordNotes.filter((n) => n.status === 'Optional').map((n) => n.note),\n      this.settings.fretCount\n    );\n\n    const bassNote = this.chordNotes.find((n) => n.status === 'Bass');\n\n    if (bassNote) {\n      result = result.filter((v) => v.bassNote.tone === bassNote.note.tone);\n    }\n\n    return result;\n  }\n\n  @observable voicingIndex: number = 0;\n\n  @computed get voicing() {\n    return this.chordVoicings[this.voicingIndex];\n  }\n\n  @computed({ keepAlive: true }) get notes() {\n    const played: Indicator[] = [];\n\n    this.voicing &&\n      this.voicing.notes.forEach((fret, string) => {\n        if (fret !== null) {\n          let note = addSemitones(this.settings.tuning.notes[string], fret);\n\n          played.push({\n            type:\n              note.tone === this.chord.rootNote.tone\n                ? 'chordRoot'\n                : 'indicator',\n            note,\n            gridArea: positionToGridArea(string, fret),\n          });\n        }\n      });\n\n    return played;\n  }\n\n  @action showVoicing(index: number) {\n    if (index < 0) {\n      index = 0;\n    } else if (index >= this.chordVoicings.length) {\n      index = this.chordVoicings.length - 1;\n    }\n\n    this.voicingIndex = index;\n  }\n\n  @action updateChordNote(index: number, status: ChordNoteStatus) {\n    this.chordNotes[index].status = status;\n  }\n}\n\nexport default ChordsStore;\n","import { SettingsStore } from './settingsStore';\nimport ChordsStore from './chordsStore';\nimport { createContext, useContext } from 'react';\n\nclass RootStore {\n  public settingsStore = new SettingsStore();\n  public chordsStore: ChordsStore;\n\n  constructor() {\n    this.chordsStore = new ChordsStore(this.settingsStore);\n  }\n}\n\nexport default RootStore;\n\nexport const RootStoreContext = createContext<RootStore>(new RootStore());\n\nexport const useSettings = () => useContext(RootStoreContext).settingsStore;\n\nexport const useChords = () => useContext(RootStoreContext).chordsStore;\n","import React, { useMemo, ReactNode, FC } from 'react';\nimport { tmap } from './util';\nimport Fret from './Fret';\nimport NoteIndicator from './NoteIndicator';\nimport { Tuning, Note } from './music';\nimport {\n  FretboardContainer,\n  FretboardHead,\n  Fingerboard,\n} from './Fretboard.styles';\nimport { observer } from 'mobx-react-lite';\nimport { useSettings } from './rootStore';\n\nconst headSize = 100;\n\nexport const positionToGridArea = (string: number, fret: number) =>\n  `s${string + 1} / span 1 / s${string + 1} / f${fret}`;\n\nexport const computeFretSizes = (fretCount: number): number[] => {\n  const frets = [];\n  let remainingSize = 10;\n\n  for (let i = 0; i < fretCount; i++) {\n    const size = remainingSize / 17.817;\n    remainingSize = remainingSize - size;\n    frets.push(size);\n  }\n\n  return frets;\n};\n\nexport function gridColumns(frets: number[]): string {\n  return (\n    '[start] auto [head] ' +\n    headSize +\n    'px ' +\n    tmap(\n      frets,\n      (size, i, { first, last }) =>\n        (first ? '[nut f0] ' : '') +\n        size +\n        'fr' +\n        ' [f' +\n        (i + 1) +\n        (last ? ' fretboard-end]' : ']')\n    ).join(' ') +\n    ' auto [end]'\n  );\n}\n\nexport function gridRows(tuning: Tuning): string {\n  const l = tuning.notes.length;\n  return (\n    '[top] auto ' +\n    tmap(\n      tuning.notes,\n      (_note, i, { first }) =>\n        (first ? '[top-edge ' : '[') + 's' + (l - i) + '] 40px'\n    ).join(' ') +\n    ' [bottom-edge s0]'\n  );\n}\n\nexport interface Indicator {\n  type: 'quiz' | 'indicator' | 'chordRoot';\n  note: Note;\n  gridArea: string;\n}\n\ninterface FretboardProps {\n  children?: ReactNode;\n  fretCount: number;\n  notes: Indicator[];\n}\n\nconst Fretboard: FC<FretboardProps> = ({ children, fretCount, notes }) => {\n  const settings = useSettings();\n\n  const [fretSizes, columns] = useMemo<[number[], string]>(() => {\n    const frets = computeFretSizes(fretCount);\n\n    return [frets, gridColumns(frets)];\n  }, [fretCount]);\n\n  const rows = useMemo(() => gridRows(settings.tuning), [settings.tuning]);\n\n  return (\n    <FretboardContainer\n      style={{\n        gridTemplateColumns: columns,\n        gridTemplateRows: rows,\n      }}\n    >\n      <FretboardHead />\n      <Fingerboard />\n\n      {children}\n\n      {notes.map((note, i) => (\n        <NoteIndicator\n          key={'note_' + i}\n          showOctave={settings.showOctave}\n          {...note}\n        ></NoteIndicator>\n      ))}\n\n      {fretSizes.map((_size, i) => (\n        <Fret key={'fret' + i} num={i}></Fret>\n      ))}\n    </FretboardContainer>\n  );\n};\n\nexport default observer(Fretboard);\n","import styled, { keyframes } from 'styled-components';\n\nexport const QuizWrapper = styled.div``;\n\nexport const QuizQuestion = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const AnswerField = styled.input`\n  width: 30vw;\n  font-size: 24px;\n  padding: 12px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n`;\n\nconst bgToGray = keyframes`\n  to {\n    background-color: lightgray;\n  }\n`;\n\nexport const Judgement = styled.div<{ correct: boolean }>`\n  animation-name: ${bgToGray};\n  animation-duration: 0.5s;\n  animation-fill-mode: forwards;\n  margin-top: 24px;\n  padding: 16px;\n  font-size: 24px;\n  background-color: ${({ correct }) => (correct ? 'green' : 'red')};\n`;\n","import React, { ReactNode, useState, SyntheticEvent, FC } from 'react';\nimport { Indicator, positionToGridArea } from './Fretboard';\nimport { getRandomInt } from './util';\nimport { toneEquals } from './music';\nimport {\n  QuizQuestion,\n  AnswerField,\n  Judgement,\n  QuizWrapper,\n} from './Quiz.styles';\nimport { observer } from 'mobx-react-lite';\nimport { useSettings } from './rootStore';\n\ninterface Judgement {\n  correct: boolean;\n  id: number;\n}\n\ninterface Question {\n  type: string;\n  string: number;\n  fret: number;\n}\n\nconst computeRandomQuestion = (\n  includedStrings: boolean[],\n  fretCount: number\n): Question => {\n  const strings = includedStrings.reduce<number[]>((acc, val, i) => {\n    if (val) {\n      acc.push(i);\n    }\n\n    return acc;\n  }, []);\n\n  return {\n    type: 'note',\n    string: strings[getRandomInt(strings.length)],\n    fret: getRandomInt(fretCount),\n  };\n};\n\ninterface QuizProps {\n  children: (notes: Indicator[]) => ReactNode;\n  includedStrings: boolean[];\n}\n\nconst Quiz: FC<QuizProps> = ({ children, includedStrings }) => {\n  const settings = useSettings();\n  const [answer, setAnswer] = useState('');\n  const [judgement, setJudgement] = useState<Judgement | null>(null);\n  const [question, setQuestion] = useState(() =>\n    computeRandomQuestion(includedStrings, settings.fretCount)\n  );\n\n  const handleSubmit = (e: SyntheticEvent<HTMLFormElement>) => {\n    // Done late in case the tuning has changed.\n    const solution = settings.tuning.positionToNote(\n      question.string,\n      question.fret\n    );\n\n    if (toneEquals(answer, solution.toString())) {\n      setQuestion(computeRandomQuestion(includedStrings, settings.fretCount));\n\n      setJudgement({\n        correct: true,\n        id: Date.now(),\n      });\n    } else {\n      setJudgement({\n        correct: false,\n        id: Date.now(),\n      });\n    }\n\n    setAnswer('');\n\n    e.preventDefault();\n  };\n\n  if (!includedStrings[question.string]) {\n    setQuestion(computeRandomQuestion(includedStrings, settings.fretCount));\n  }\n\n  const notes: Indicator[] = [\n    {\n      note: settings.tuning.positionToNote(question.string, question.fret),\n      type: 'quiz',\n      gridArea: positionToGridArea(question.string, question.fret),\n    },\n  ];\n\n  return (\n    <>\n      {children(notes)}\n      <QuizWrapper>\n        <QuizQuestion onSubmit={(event) => handleSubmit(event)}>\n          <h1>What is the higlighted note?</h1>\n          <AnswerField\n            type=\"text\"\n            value={answer}\n            onChange={(event) => setAnswer(event.target.value)}\n          />\n          {judgement ? (\n            <Judgement correct={judgement.correct} key={judgement.id}>\n              {judgement.correct ? 'Correct' : 'Incorrect'}\n            </Judgement>\n          ) : null}\n        </QuizQuestion>\n      </QuizWrapper>\n    </>\n  );\n};\n\nexport default observer(Quiz);\n","import styled from 'styled-components';\n\nexport const GuitarString = styled.div`\n  z-index: 10;\n`;\n\nexport const RootNote = styled.div`\n  padding: 0 6px 0 12px;\n  align-self: center;\n\n  &.excluded {\n    color: #ccc;\n  }\n`;\n","import React, { Fragment, FC } from 'react';\nimport { GuitarString, RootNote } from './GuitarStrings.styles';\nimport { observer } from 'mobx-react-lite';\nimport { useSettings } from './rootStore';\n\nconst MAX_STRING_WIDTH = 3;\n\ninterface GuitarStringProps {\n  activeStrings: boolean[];\n  onToggle: (num: number) => void;\n}\n\nexport const GuitarStrings: FC<GuitarStringProps> = ({\n  activeStrings,\n  onToggle,\n}) => {\n  const settings = useSettings();\n\n  return (\n    <>\n      {settings.tuning.notes.map((rootNote, num, { length }) => {\n        const width = Math.max(\n          1,\n          Math.round(((length - (num + 1)) / length) * MAX_STRING_WIDTH)\n        );\n        return (\n          <Fragment key={num}>\n            <RootNote\n              onClick={() => onToggle(num)}\n              className={activeStrings[num] ? 'included' : 'excluded'}\n              style={{\n                gridArea: `s${num + 1} / fretboard-end`,\n              }}\n            >\n              {rootNote.tone}\n            </RootNote>\n            <GuitarString\n              style={{\n                height: '50%',\n                gridArea: `s${num} / head / s${num + 1} / fretboard-end`,\n                borderBottom: `${width}px solid yellow`,\n              }}\n            ></GuitarString>\n          </Fragment>\n        );\n      })}\n    </>\n  );\n};\n\nexport default observer(GuitarStrings);\n","import styled from 'styled-components';\n\nexport const ListboxWrapper = styled.ul`\n  overflow-y: auto;\n  position: relative;\n  padding: 0;\n  border: 1px solid #ddd;\n  background-color: #fff;\n  font-size: 12px;\n  margin: 0;\n`;\n\nexport const ListboxOption = styled.li<{ selected: boolean }>`\n  display: block;\n  padding: 0.4em 1em 0.4em 1em;\n  position: relative;\n  line-height: 1.8em;\n\n  background: ${({ selected }) => (selected ? `#bde4ff` : 'none')};\n`;\n","import React, { useRef, KeyboardEvent, useEffect } from 'react';\nimport { ListboxWrapper, ListboxOption } from './Listbox.styles';\n\nexport interface Option {\n  label: string;\n  value: any;\n}\n\ninterface Props {\n  name: string;\n  options: any[];\n  className?: string;\n  value: any;\n  onSelect: (value: any) => void;\n  id: string;\n}\n\nconst Listbox = React.memo(\n  ({ name, options, className, value, onSelect, id }: Props) => {\n    const ulEl = useRef<HTMLUListElement>(null);\n    const selectedOptionIndex = options.findIndex(option => option === value);\n    const activeDescendant =\n      selectedOptionIndex > -1\n        ? name + '_opt' + selectedOptionIndex\n        : undefined;\n\n    useEffect(() => {\n      const ul = ulEl.current;\n      if (ul) {\n        if (ul.scrollHeight > ul.clientHeight) {\n          const element = ul.querySelector(\n            '#' + activeDescendant\n          ) as HTMLElement;\n          var scrollBottom = ul.clientHeight + ul.scrollTop;\n          var elementBottom = element.offsetTop + element.offsetHeight;\n          if (elementBottom > scrollBottom) {\n            ul.scrollTop = elementBottom - ul.clientHeight;\n          } else if (element.offsetTop < ul.scrollTop) {\n            ul.scrollTop = element.offsetTop;\n          }\n        }\n      }\n    }, [activeDescendant]);\n\n    function focusFirstItem() {\n      onSelect(options[0]);\n    }\n\n    function focusLastItem() {\n      onSelect(options[options.length - 1]);\n    }\n\n    function setupFocus() {\n      if (!activeDescendant) {\n        focusFirstItem();\n      }\n    }\n\n    function checkKeyPress(evt: KeyboardEvent) {\n      const key = evt.key;\n\n      if (!activeDescendant) {\n        return;\n      }\n\n      let nextItem: Element | null = document.getElementById(activeDescendant);\n\n      if (!nextItem) {\n        return;\n      }\n\n      switch (key) {\n        case 'ArrowUp':\n          evt.preventDefault();\n          if (selectedOptionIndex > 0) {\n            onSelect(options[selectedOptionIndex - 1]);\n          }\n          break;\n        case 'ArrowDown':\n          evt.preventDefault();\n          if (selectedOptionIndex < options.length - 1) {\n            onSelect(options[selectedOptionIndex + 1]);\n          }\n          break;\n        case 'Home':\n          evt.preventDefault();\n          focusFirstItem();\n          break;\n        case 'End':\n          evt.preventDefault();\n          focusLastItem();\n          break;\n      }\n    }\n\n    return (\n      <ListboxWrapper\n        ref={ulEl}\n        className={className}\n        role=\"listbox\"\n        onFocus={setupFocus}\n        onKeyDown={checkKeyPress}\n        tabIndex={0}\n        aria-activedescendant={activeDescendant}\n      >\n        {options.map((o, i) => (\n          <ListboxOption\n            key={`${id}-${o}`}\n            id={name + '_opt' + i}\n            selected={value === o}\n            role=\"option\"\n            aria-selected={value === 0}\n            onClick={() => onSelect(o)}\n          >\n            {`${o}`}\n          </ListboxOption>\n        ))}\n      </ListboxWrapper>\n    );\n  }\n);\n\nexport default Listbox;\n","import styled from 'styled-components';\n\nexport const ChordsExplorerContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1.2fr 1fr auto;\n  grid-template-rows: auto minmax(0, 1fr);\n  grid-gap: 12px;\n  padding: 0 12px 12px 12px;\n\n  .label {\n    grid-row: 1;\n    font-size: small;\n    font-weight: bold;\n  }\n\n  .list {\n    grid-row: 2;\n  }\n\n  .root {\n    grid-area: 1;\n  }\n\n  .chord-type {\n    grid-column: 2;\n  }\n\n  .bass-note {\n    grid-column: 3;\n  }\n\n  .chord-notes {\n    grid-column: 3;\n\n    &.list {\n      border: 1px solid #ccc;\n      padding: 6px 10px;\n      font-size: small;\n      display: grid;\n      grid-template-columns: auto auto auto auto auto;\n      grid-auto-flow: row;\n      align-content: start;\n      grid-gap: 6px;\n    }\n  }\n\n  .voicings {\n    grid-column: 4;\n  }\n\n  .voicings-nav {\n    grid-area: 2 / 5;\n    display: flex;\n    flex-direction: column;\n\n    > button {\n      flex: 1;\n    }\n  }\n`;\n","import React, { ReactNode, SyntheticEvent, FC } from 'react';\nimport { Indicator } from './Fretboard';\nimport Listbox from './Listbox';\nimport { RouteChildrenProps, useHistory } from 'react-router';\nimport { ChordsExplorerContainer } from './ChordsExplorer.styles';\nimport { ChordRoots, chordTypeKeys, ChordNoteStatus } from './chordsStore';\nimport { observer } from 'mobx-react-lite';\nimport { useParams } from 'react-router-dom';\nimport { useChords } from './rootStore';\n\ninterface Params {\n  chordRoot: string;\n  chordType: string;\n}\n\ninterface ChordsExporerProps extends RouteChildrenProps<Params> {\n  children: (notes: Indicator[]) => ReactNode;\n}\n\nconst ChordsExplorer: FC<ChordsExporerProps> = ({ children }) => {\n  const chords = useChords();\n  const history = useHistory();\n  const { chordRoot, chordType } = useParams<Params>();\n\n  let chordRootValue = decodeURIComponent(chordRoot);\n  let chordTypeValue = decodeURIComponent(chordType);\n\n  if (chordRootValue !== chords.chordRootValue) {\n    chords.chordRootValue = chordRootValue;\n  }\n\n  if (chordTypeValue !== chords.chordType) {\n    chords.chordType = chordTypeValue;\n  }\n\n  return (\n    <>\n      {children(chords.notes)}\n      <ChordsExplorerContainer>\n        <label className=\"root label\">Root</label>\n        <Listbox\n          id=\"chordRoot\"\n          name=\"chordRoot\"\n          className=\"chord list\"\n          options={ChordRoots}\n          value={chords.chordRoot}\n          onSelect={(selected) =>\n            history.push(\n              `/chords/${encodeURIComponent(selected.value)}/${\n                chords.chordType\n              }`\n            )\n          }\n        />\n\n        <label className=\"chord-type label\">Chord</label>\n        <Listbox\n          id=\"chordType\"\n          name=\"chordType\"\n          className=\"chord-type list\"\n          options={chordTypeKeys}\n          value={chords.chordType}\n          onSelect={(selected) =>\n            history.push(\n              `/chords/${encodeURIComponent(\n                chords.chordRoot.value\n              )}/${selected}`\n            )\n          }\n        />\n\n        <label className=\"chord-notes label\">Notes</label>\n        <div className=\"chord-notes list\">\n          {chords.chordNotes.map((n, i) => {\n            const update = (e: SyntheticEvent<HTMLInputElement>) =>\n              chords.updateChordNote(\n                i,\n                e.currentTarget.value as ChordNoteStatus\n              );\n\n            return (\n              <React.Fragment key={i}>\n                <span className=\"chord-note-label\">{n.label}:</span>\n                <label>\n                  <input\n                    type=\"radio\"\n                    value=\"Bass\"\n                    checked={n.status === 'Bass'}\n                    onChange={update}\n                  />{' '}\n                  Bass\n                </label>\n\n                <label>\n                  <input\n                    type=\"radio\"\n                    value=\"Required\"\n                    checked={n.status === 'Required'}\n                    onChange={update}\n                  />{' '}\n                  Required\n                </label>\n\n                <label>\n                  <input\n                    type=\"radio\"\n                    value=\"Optional\"\n                    checked={n.status === 'Optional'}\n                    onChange={update}\n                  />{' '}\n                  Optional\n                </label>\n\n                <label>\n                  <input\n                    type=\"radio\"\n                    value=\"Omitted\"\n                    checked={n.status === 'Omitted'}\n                    onChange={update}\n                  />{' '}\n                  Omitted\n                </label>\n              </React.Fragment>\n            );\n          })}\n        </div>\n\n        <label className=\"voicings label\">\n          {chords.chordVoicings.length} Voicings\n        </label>\n        <Listbox\n          id=\"voicings\"\n          name=\"voicings\"\n          className=\"voicings list\"\n          options={chords.chordVoicings}\n          value={chords.voicing}\n          onSelect={(value) =>\n            chords.showVoicing(chords.chordVoicings.indexOf(value))\n          }\n        />\n\n        <div className=\"voicings-nav\">\n          <button onClick={() => chords.showVoicing(0)}>|&lt;</button>\n          <button onClick={() => chords.showVoicing(chords.voicingIndex - 1)}>\n            &lt;\n          </button>\n          <button onClick={() => chords.showVoicing(chords.voicingIndex + 1)}>\n            &gt;\n          </button>\n          <button\n            onClick={() => chords.showVoicing(chords.chordVoicings.length - 1)}\n          >\n            &gt;|\n          </button>\n        </div>\n      </ChordsExplorerContainer>\n    </>\n  );\n};\n\nexport default observer(ChordsExplorer);\n","import styled from 'styled-components';\n\nexport const SettingsWrapper = styled.div`\n  grid-area: 1 / 3;\n  justify-self: start;\n  display: flex;\n  font-size: small;\n\n  .tuning {\n    margin: 0 18px 0 6px;\n  }\n`;\n","import React, { FC } from 'react';\nimport { TUNINGS } from './music';\nimport { SettingsWrapper } from './Settings.styles';\nimport { useSettings } from './rootStore';\n\nconst Settings: FC = () => {\n  const settings = useSettings();\n\n  return (\n    <SettingsWrapper>\n      <label htmlFor=\"tuning\">Tuning</label>\n\n      <select\n        className=\"tuning\"\n        value={settings.tuning.name}\n        onChange={(e) => {\n          settings.tuning =\n            TUNINGS.find((tuning) => tuning.name === e.currentTarget.value) ||\n            settings.tuning;\n        }}\n        id=\"tuning\"\n      >\n        {TUNINGS.map((tuning, i) => (\n          <option key={i}>{tuning.name}</option>\n        ))}\n      </select>\n\n      <label className=\"show-octave\">\n        <input\n          type=\"checkbox\"\n          checked={settings.showOctave}\n          onChange={() => (settings.showOctave = !settings.showOctave)}\n        />{' '}\n        Show octave\n      </label>\n    </SettingsWrapper>\n  );\n};\n\nexport default Settings;\n","import styled from 'styled-components';\n\nexport const AppContainer = styled.div`\n  display: grid;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  grid-template-areas:\n    'header'\n    'fretboard'\n    'content';\n  grid-template-rows: auto auto minmax(0, 1fr);\n  grid-template-columns: 1fr;\n  grid-gap: 24px;\n\n  .Explorer,\n  .Quiz {\n    grid-area: content;\n    min-height: 0;\n  }\n`;\n\nexport const AppHeader = styled.header`\n  display: grid;\n  grid-area: header;\n  grid-template: auto / auto 1fr auto;\n  background: #f0f0f0;\n  grid-column-gap: 16px;\n  align-items: center;\n  padding: 0 12px;\n  border-bottom: 1px solid #ddd;\n`;\n\nexport const AppTitle = styled.h1`\n  grid-area: 1 / 1;\n  font-size: inherit;\n  align-self: center;\n`;\n\nexport const AppNav = styled.nav`\n  grid-area: 1 / 2;\n  display: flex;\n\n  a {\n    padding: 12px;\n    text-align: center;\n    border-left: 1px solid #ccc;\n    width: 100px;\n\n    &:last-child {\n      border-right: 1px solid #ccc;\n    }\n\n    &.active {\n      background-color: #f8f8f8;\n      font-weight: bold;\n    }\n  }\n`;\n","import React, { useState, FC } from 'react';\nimport { newBoolArray } from './util';\nimport Fretboard, { Indicator } from './Fretboard';\nimport Quiz from './Quiz';\nimport GuitarStrings from './GuitarStrings';\nimport ChordsExplorer from './ChordsExplorer';\nimport Settings from './Settings';\nimport {\n  HashRouter as Router,\n  Route,\n  NavLink,\n  Redirect,\n} from 'react-router-dom';\nimport { AppContainer, AppHeader, AppTitle, AppNav } from './App.styles';\nimport { useSettings } from './rootStore';\nimport { observer } from 'mobx-react-lite';\n\nconst fretCount = 15;\n\nconst App: FC = () => {\n  const settings = useSettings();\n\n  const [activeStrings, setActiveStrings] = useState(\n    newBoolArray(settings.tuning.notes.length)\n  );\n\n  const toggleGuitarString = (toToggle: number) => {\n    let value = [...activeStrings];\n    value[toToggle] = !value[toToggle];\n    setActiveStrings(value);\n  };\n\n  const fretboard = (notes: Indicator[]) => (\n    <Fretboard fretCount={fretCount} notes={notes}>\n      <GuitarStrings\n        activeStrings={activeStrings}\n        onToggle={toggleGuitarString}\n      ></GuitarStrings>\n    </Fretboard>\n  );\n\n  return (\n    <Router>\n      <AppContainer>\n        <AppHeader>\n          <AppTitle>Fretfull</AppTitle>\n          <AppNav>\n            <NavLink className=\"App-chords-link\" to=\"/chords\">\n              Chords\n            </NavLink>\n            <NavLink className=\"App-quiz-link\" to=\"/quiz\">\n              Quiz\n            </NavLink>\n          </AppNav>\n          <Settings />\n        </AppHeader>\n\n        <Route\n          exact\n          path=\"/\"\n          render={() => <Redirect to=\"/chords/A/Major triad\" />}\n        ></Route>\n        <Route\n          exact\n          path=\"/chords\"\n          render={() => <Redirect to=\"/chords/A/Major triad\" />}\n        ></Route>\n\n        <Route\n          exact\n          path=\"/chords/:chordRoot/:chordType\"\n          render={(props) => (\n            <ChordsExplorer {...props}>{fretboard}</ChordsExplorer>\n          )}\n        />\n\n        <Route\n          path=\"/quiz\"\n          render={() => (\n            <Quiz includedStrings={activeStrings}>{fretboard}</Quiz>\n          )}\n        />\n      </AppContainer>\n    </Router>\n  );\n};\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport RootStore, { RootStoreContext } from './rootStore';\n\nReactDOM.render(\n  <RootStoreContext.Provider value={new RootStore()}>\n    <App />\n  </RootStoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}