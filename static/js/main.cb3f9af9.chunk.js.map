{"version":3,"sources":["Fret.js","GuitarString.js","music.js","App.js","util.js","serviceWorker.js","index.js"],"names":["Fret","_ref","num","style","dots","react_default","a","createElement","Fragment","className","gridArea","concat","GuitarString","includeInQuiz","rootNote","width","onToggle","key","onClick","letter","height","borderBottom","LETTER_TO_NUM","C","C#","Db","D","D#","Eb","E","F","F#","Gb","G","G#","Ab","A","A#","Bb","B","NUM_TO_LETTER","parseSpn","spn","length","octave","parseInt","TUNINGS","name","notes","map","positionToNote","string","fret","note","semitones","addSemitones","getRandomInt","max","Math","floor","random","posToGrid","App","frets","useMemo","fretCount","remainingSize","i","size","computeFrets","_useState","useState","_useState2","Object","slicedToArray","appMode","setAppMode","_useState3","_useState4","tuning","setTuning","_useState5","_useState6","judgement","setJudgement","_useState7","_useState8","answer","setAnswer","_useState9","len","val","arguments","undefined","result","push","newBoolArray","_useState10","includedStrings","setIncludedStrings","strings","round","computeStrings","computeRandomQuestion","validStrings","filter","_s","fretNum","type","_useState11","_useState12","question","setQuestion","allNotes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","cssClass","label","err","return","noteIndicators","handleSubmit","event","b","hasOwnProperty","correct","id","Date","now","preventDefault","checked","onChange","e","find","target","gridTemplateColumns","f","join","gridTemplateRows","assign","str","toToggle","toConsumableArray","toggleGuitarString","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMA8BeA,EAAA,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,IAAKC,EAAPF,EAAOE,MAAOC,EAAdH,EAAcG,KAAd,OACbC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,QACEE,UAAU,cACVN,MAAO,CACLO,SAAQ,OAAAC,OAAUT,EAAM,KAGxBA,EAAM,GAEVG,EAAAC,EAAAC,cAAA,OACEE,UAAU,OACVN,MAAQA,GAGG,IAATC,EAAaC,EAAAC,EAAAC,cAAA,QAAME,UAAU,eAAuB,KAG3C,IAATL,EAAaC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACXH,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAqBJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,iBACjD,QChCCG,EAAA,SAAAX,GAAsD,IAApDY,EAAoDZ,EAApDY,cAAeC,EAAqCb,EAArCa,SAAUZ,EAA2BD,EAA3BC,IAAKa,EAAsBd,EAAtBc,MAAOC,EAAef,EAAfe,SACpD,OAAOX,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACLH,EAAAC,EAAAC,cAAA,OACEU,IAAMf,EACNgB,QAASF,EACTP,UAAW,cAAgBI,EAAgB,WAAa,YACxDV,MAAO,CACLO,SAAQ,GAAAC,OAAMT,EAAM,EAAZ,WAETY,EAASK,QACZd,EAAAC,EAAAC,cAAA,OACEE,UAAU,SACVN,MAAS,CACPiB,OAAQ,MACRV,SAAQ,GAAAC,OAAMT,EAAM,EAAZ,WAAAS,OAAyBT,EAAM,EAA/B,SACRmB,aAAY,GAAAV,OAAMI,EAAN,wBCjCdO,SAAgB,CACpBC,EAAK,EACLC,KAAM,EACNC,GAAM,EACNC,EAAK,EACLC,KAAM,EACNC,GAAM,EACNC,EAAK,EACLC,EAAK,EACLC,KAAM,EACNC,GAAM,EACNC,EAAK,EACLC,KAAM,EACNC,GAAM,EACNC,EAAK,EACLC,KAAM,GACNC,GAAM,GACNC,EAAK,KAGDC,EAAgB,CACpB,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,KASK,SAASC,EAASC,GACvB,OAAmB,IAAfA,EAAIC,OACC,CACLxB,OAAQuB,EAAI,GAAKA,EAAI,GACrBE,OAAQC,SAASH,EAAI,KAIlB,CACLvB,OAAQuB,EAAI,GACZE,OAAQC,SAASH,EAAI,KA2BlB,IAAMI,EAAU,CACrB,CACEC,KAAM,WACNC,MAAO,CACL,KAAM,KAAM,KAAM,KAAM,KAAM,MAC9BC,IAAIR,IACL,CACDM,KAAM,SACNC,MAAO,CACL,KAAM,KAAM,MAAO,KAAM,KAAM,MAC/BC,IAAIR,KCjFV,IAEMS,EAAiB,SAACC,EAAQC,GAC9B,OD6CK,SAAsBC,EAAMC,GACjC,IAAMpD,EAAMoB,EAAc+B,EAAKlC,QAE3ByB,EAASS,EAAKT,OACdzB,EAASjB,EAAOoD,EAAY,GAahC,OAXInC,EAAS,GACXA,GAAU,GACVyB,KAEOzB,GAAU,KACjBA,GAAU,GACVyB,KAGFA,GAAWU,EAAY,GAAM,EAEtB,CACLnC,OAAQqB,EAAcrB,GACtByB,UChEKW,CAAaJ,EAAOrC,SAAUsC,GAAMjC,QAG7C,SAASqC,EAAaC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,IAG/C,IAAMI,EAAY,SAACV,EAAQC,GAAT,OAAmBD,EAAOjD,IAAM,EAAK,OAASkD,EAAO,IAkNxDU,EAhNH,WACV,IAAMC,EAAQC,kBAAQ,kBHlBI,SAACC,GAI3B,IAHA,IAAMF,EAAQ,GACVG,EAAgB,IAEXC,EAAI,EAAGA,EAAIF,EAAWE,IAAK,CAClC,IAAMC,EAAOF,EAAgB,OAC7BA,GAAgCE,EAEhCL,EAAMI,GAAK,CACTC,KAAMA,EACNlE,IAAKiE,EACLhE,MAAO,CACLO,SAAQ,OAAAC,OAAUwD,EAAI,EAAd,YAAAxD,OAA4BwD,EAAI,IAE1C/D,KAAM,GAGE,IAAN+D,GAAiB,IAANA,GAAiB,IAANA,GAAiB,IAANA,EACnCJ,EAAMI,GAAG/D,KAAO,EAEH,KAAN+D,IACPJ,EAAMI,GAAG/D,KAAO,GAIpB,OAAO2D,EGPqBM,CAAa,KAAK,IAD9BC,EAEcC,mBAAS,WAFvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAETK,EAFSH,EAAA,GAEAI,EAFAJ,EAAA,GAAAK,EAGYN,mBAASzB,EAAQ,IAH7BgC,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAGTE,EAHSD,EAAA,GAGDE,EAHCF,EAAA,GAAAG,EAIkBV,mBAAS,MAJ3BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAITE,EAJSD,EAAA,GAIEE,EAJFF,EAAA,GAAAG,EAKYd,mBAAS,IALrBe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAKTE,EALSD,EAAA,GAKDE,EALCF,EAAA,GAAAG,EAM8BlB,mBCzBzC,SAAsBmB,GAG3B,IAH4C,IAAZC,IAAYC,UAAAjD,OAAA,QAAAkD,IAAAD,UAAA,KAAAA,UAAA,GACtCE,EAAS,GAEN3B,EAAI,EAAGA,EAAKuB,EAAKvB,IACxB2B,EAAOC,KAAKJ,GAGd,OAAOG,EDkBgDE,CAAajB,EAAO/B,MAAML,SANjEsD,EAAAxB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAMTS,EANSD,EAAA,GAMQE,EANRF,EAAA,GAQVG,EAAUpC,kBACd,kBFxB0B,SAACe,GAG7B,IAFA,IAAMqB,EAAU,GAEPjC,EAAI,EAAGA,EAAIY,EAAO/B,MAAML,OAAQwB,IACvCiC,EAAQjC,GAAK,CACXrD,SAAUiE,EAAO/B,MAAMmB,GACvBjE,IAAKiE,EACLpD,MAAO2C,KAAKD,IAAI,EAAGC,KAAK2C,OAAQlC,EAAI,GAAKY,EAAO/B,MAAML,OATnC,KAavB,OAAOyD,EEaCE,CAAevB,IACrB,CAACA,EAAQmB,IAGLK,EAAwB,SAACL,GAC7B,IAAIM,EAAeJ,EAAQK,OAAO,SAACC,EAAIvC,GAAL,OAAW+B,EAAgB/B,KAEvDhB,EAASqD,EADAhD,EAAagD,EAAa7D,SAEnCgE,EAAUnD,EAAaO,EAAMpB,QAEnC,MAAO,CACLiE,KAAM,OACNrB,OAAQrC,EAAeC,EAAQwD,GAC/BxD,SACAC,KAAMuD,IAvBME,EA2BgBtC,mBAAS,kBACvCgC,EAAsBL,KA5BRY,EAAArC,OAAAC,EAAA,EAAAD,CAAAoC,EAAA,GA2BTE,EA3BSD,EAAA,GA2BCE,EA3BDF,EAAA,GA+BVG,EAAWjD,kBAAQ,WACvB,IAAM8B,EAAS,GADcoB,GAAA,EAAAC,GAAA,EAAAC,OAAAvB,EAAA,IAG7B,QAAAwB,EAAAC,EAAmBlB,EAAnBmB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EACE,IAD0B,IAAnB/D,EAAmBkE,EAAAM,MACjBvE,EAAO,EAAGA,EAAOW,EAAMpB,OAAS,EAAGS,IAE1C0C,EAAOC,KAAK,CACV6B,SAAU,YACVC,MAAO3E,EAAeC,EAAQC,GAC9B1C,SAAUmD,EAAUV,EAAQC,KATL,MAAA0E,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAI,EAAAS,QAAAT,EAAAS,SAAA,WAAAZ,EAAA,MAAAC,GAc7B,OAAOtB,GACN,CAACf,IAEAiD,EAAiB,GAEL,SAAZrD,EACFqD,EAAejC,KAAK,CAClB8B,MAAO,IACPD,SAAU,WACVlH,SAAUmD,EAAUkD,EAAS5D,OAAQ4D,EAAS3D,QAIhD4E,EAAiBf,EAGnB,IAAMgB,EAAe,SAAAC,GD7ChB,IAAsB5H,EAAG6H,EAAH7H,EC8CRyG,EAASxB,OD9CE4C,EC8CM5C,ED7C7BjE,EAAc8G,eAAe9H,IAClCgB,EAAc8G,eAAeD,IAC7B7G,EAAchB,KAAOgB,EAAc6G,IC4CjCnB,EAAYT,KAEZnB,EAAa,CACXiD,SAAS,EACTC,GAAIC,KAAKC,SAIXpD,EAAa,CACXiD,SAAS,EACTC,GAAIC,KAAKC,QAIbhD,EAAU,IAEV0C,EAAMO,kBAiBR,OACEpI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAAlB,cAGEJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEqG,KAAK,QACLe,MAAM,UACNe,QAAqB,YAAZ/D,EACTgE,SAAU,kBAAM/D,EAAW,cAL/B,WASAvE,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEqG,KAAK,QACLe,MAAM,OACNe,QAAqB,SAAZ/D,EACTgE,SAAU,kBAAM/D,EAAW,WAL/B,SAWFvE,EAAAC,EAAAC,cAAA,UACEoH,MAAO5C,EAAOhC,KACd4F,SA1CoB,SAACC,GAC3B5D,EAAUlC,EAAQ+F,KAAK,SAAA9D,GAAM,OAAIA,EAAOhC,OAAS6F,EAAEE,OAAOnB,SAAU5C,KA2C5DjC,EAAQG,IAAI,SAAC8B,EAAQZ,GAAT,OAAe9D,EAAAC,EAAAC,cAAA,UAAQU,IAAKkD,GAAIY,EAAOhC,UAIzD1C,EAAAC,EAAAC,cAAA,OACEE,UAAU,gBACVN,MAAO,CACL4I,oBAAmB,GAAApI,OAjJV,IAiJU,OAAAA,OAAwBoD,EAAMd,IAAI,SAAA+F,GAAC,OAAIA,EAAE5E,KAAO,OAAM6E,KAAK,MAC9EC,iBAAkB,QAAU9C,EAAQnD,IAAI,iBAAM,QAAOgG,KAAK,KAAO,UAGnE5I,EAAAC,EAAAC,cAAA,OACEE,UAAU,SACVN,MAAO,CACLO,SAAQ,oBAIZL,EAAAC,EAAAC,cAAA,OACEE,UAAU,cACVN,MAAO,CACLO,SAAQ,qBAKVsH,EAAe/E,IAAI,SAAAhD,EAA8BkE,GAA9B,IAAEzD,EAAFT,EAAES,SAAUmH,EAAZ5H,EAAY4H,MAAOD,EAAnB3H,EAAmB2H,SAAnB,OACjBvH,EAAAC,EAAAC,cAAA,OACEU,IAAKkD,EACL1D,UAAW,QAAUmH,EACrBzH,MAAO,CAAEO,aAEPmH,KAMN9D,EAAMd,IAAI,SAACG,EAAMe,GAAP,OACR9D,EAAAC,EAAAC,cAACP,EAADyE,OAAA0E,OAAA,CAAMlI,IAAKkD,GAAOf,MAKpBgD,EAAQnD,IAAI,SAACmG,EAAKjF,GAAN,OACV9D,EAAAC,EAAAC,cAACK,EAAD6D,OAAA0E,OAAA,CACElI,IAAKkD,EACLnD,SAAU,kBAvFK,SAAAqI,GACzB,IAAI1B,EAAKlD,OAAA6E,EAAA,EAAA7E,CAAOyB,GAChByB,EAAM0B,IAAa1B,EAAM0B,GACzBlD,EAAmBwB,GAEfZ,EAAS5D,OAAOjD,MAAQmJ,GAC1BrC,EAAYT,EAAsBoB,IAiFV4B,CAAmBpF,IACnCtD,cAAeqF,EAAgB/B,IAC3BiF,OAOE,SAAZzE,EAAqBtE,EAAAC,EAAAC,cAAA,QACnBE,UAAU,eACV+I,SAAU,SAAAtB,GAAK,OAAID,EAAaC,KAEhC7H,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,SACEE,UAAU,mBACVmG,KAAK,OACLe,MAAOpC,EACPoD,SAAU,SAAAT,GAAK,OAAI1C,EAAU0C,EAAMY,OAAOnB,UAG1CxC,EACE9E,EAAAC,EAAAC,cAAA,OACEE,UAAW,kBAAoB0E,EAAUkD,QAAU,UAAY,aAC/DpH,IAAKkE,EAAUmD,IAEbnD,EAAUkD,QAAU,UAAY,aAC3B,MAEP,OEjNIoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1J,EAAAC,EAAAC,cAACyJ,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb3f9af9.chunk.js","sourcesContent":["import React from 'react';\n\nexport const computeFrets = (fretCount) => {\n  const frets = [];\n  let remainingSize = 200;\n\n  for (let i = 0; i < fretCount; i++) {\n    const size = remainingSize / 17.817;\n    remainingSize = remainingSize - size;\n  \n    frets[i] = {\n      size: size,\n      num: i,\n      style: {\n        gridArea: `2 / ${ i + 2 } / -1 / ${ i + 2 }`\n      },\n      dots: 0\n    }\n  \n    if (i === 2 || i === 4 || i === 6 || i === 8) {\n      frets[i].dots = 1;\n    }\n    else if (i === 11) {\n      frets[i].dots = 2;\n    }\n  }\n\n  return frets;\n}\n\nexport default ({num, style, dots}) =>\n  <>\n    <span\n      className=\"fret-number\"\n      style={{\n        gridArea: `1 / ${ num + 2 }`\n      }}\n    >\n      { num + 1 }\n    </span>\n    <div\n      className=\"fret\"\n      style={ style }\n    >\n      {\n        dots === 1 ? <span className=\"dot single\"></span> : null\n      }\n      {\n        dots === 2 ? <>\n          <span className=\"dot double1\"></span><span className=\"dot double2\"></span>\n        </> : null\n      }\n    </div>\n  </>;","import React from 'react';\n\nconst MAX_STRING_WIDTH = 3;\n\nexport const computeStrings = (tuning) => {\n  const strings = [];\n\n  for (let i = 0; i < tuning.notes.length; i++) {\n    strings[i] = {\n      rootNote: tuning.notes[i],\n      num: i,\n      width: Math.max(1, Math.round(((i + 1) / tuning.notes.length) * MAX_STRING_WIDTH))\n    }\n  }\n\n  return strings;\n}\n\nexport default ({includeInQuiz, rootNote, num, width, onToggle }) => {\n  return <>\n    <div\n      key={ num }\n      onClick={onToggle}\n      className={'root-note ' + (includeInQuiz ? 'included' : 'excluded')}\n      style={{\n        gridArea: `${ num + 2 } / -1`\n      }}\n    >{ rootNote.letter }</div>\n    <div\n      className=\"string\"\n      style = {{\n        height: '50%',\n        gridArea: `${ num + 2 } / 1 / ${ num + 2 } / -1`,\n        borderBottom: `${ width }px solid yellow`\n      }}\n    ></div>\n  </>\n}","const LETTER_TO_NUM = {\n  'C': 0,\n  'C#': 1,\n  'Db': 1,\n  'D': 2,\n  'D#': 3,\n  'Eb': 3,\n  'E': 4,\n  'F': 5,\n  'F#': 6,\n  'Gb': 6,\n  'G': 7,\n  'G#': 8,\n  'Ab': 8,\n  'A': 9,\n  'A#': 10,\n  'Bb': 10,\n  'B': 11\n};\n\nconst NUM_TO_LETTER = [\n  'C',\n  'C#',\n  'D',\n  'D#',\n  'E',\n  'F',\n  'F#',\n  'G',\n  'G#',\n  'A',\n  'A#',\n  'B'\n];\n\nexport function letterEquals(a, b) {\n  return LETTER_TO_NUM.hasOwnProperty(a) &&\n    LETTER_TO_NUM.hasOwnProperty(b) &&\n    LETTER_TO_NUM[a] === LETTER_TO_NUM[b];\n}\n\nexport function parseSpn(spn) {\n  if (spn.length === 3) {\n    return {\n      letter: spn[0] + spn[1],\n      octave: parseInt(spn[2])\n    };\n  }\n\n  return {\n    letter: spn[0],\n    octave: parseInt(spn[1])\n  };\n}\n\nexport function addSemitones(note, semitones) {\n  const num = LETTER_TO_NUM[note.letter];\n\n  let octave = note.octave;\n  let letter = num + (semitones % 12);\n\n  if (letter < 0) {\n    letter += 12;\n    octave--;\n  }\n  else if (letter >= 12) {\n    letter -= 12;\n    octave++;\n  }\n\n  octave += (semitones / 12) | 0;\n\n  return {\n    letter: NUM_TO_LETTER[letter],\n    octave\n  };\n}\n\nexport const TUNINGS = [\n  {\n    name: 'Standard',\n    notes: [\n      'E2', 'A2', 'D3', 'G3', 'B4', 'E4'\n    ].map(parseSpn)\n  }, {\n    name: 'Open A',\n    notes: [\n      'E2', 'A2', 'C#3', 'E3', 'A3', 'E4'\n    ].map(parseSpn)\n  }\n];\n","import React, { useState, useMemo } from 'react';\nimport Fret, { computeFrets} from './Fret';\nimport GuitarString, { computeStrings } from './GuitarString';\nimport './App.css';\nimport { TUNINGS, addSemitones, letterEquals } from './music';\nimport { newBoolArray } from './util';\n\nconst bridgeSize = 100;\n\nconst positionToNote = (string, fret) => {\n  return addSemitones(string.rootNote, fret).letter;\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst posToGrid = (string, fret) => (string.num + 2) + ' / ' + (fret + 1);\n\nconst App = () => {\n  const frets = useMemo(() => computeFrets(12), []);\n  const [appMode, setAppMode] = useState('explore');\n  const [tuning, setTuning] = useState(TUNINGS[0]);\n  const [judgement, setJudgement] = useState(null);\n  const [answer, setAnswer] = useState('');\n  const [includedStrings, setIncludedStrings] = useState(newBoolArray(tuning.notes.length));\n\n  const strings = useMemo(\n    () => computeStrings(tuning, includedStrings),\n    [tuning, includedStrings]\n  );\n\n  const computeRandomQuestion = (includedStrings) => {\n    let validStrings = strings.filter((_s, i) => includedStrings[i]);\n    const strNum = getRandomInt(validStrings.length);\n    const string = validStrings[strNum];\n    const fretNum = getRandomInt(frets.length);\n  \n    return {\n      type: 'note',\n      answer: positionToNote(string, fretNum),\n      string,\n      fret: fretNum\n    };\n  }\n\n  const [question, setQuestion] = useState(() => \n    computeRandomQuestion(includedStrings)\n  );\n\n  const allNotes = useMemo(() => {\n    const result = [];\n\n    for (let string of strings) {\n      for (let fret = 0; fret < frets.length + 1; fret++) {\n\n        result.push({\n          cssClass: 'indicator',\n          label: positionToNote(string, fret),\n          gridArea: posToGrid(string, fret)\n        })\n      }\n    }\n\n    return result;\n  }, [tuning]);\n\n  let noteIndicators = [];\n\n  if (appMode === 'quiz') {\n    noteIndicators.push({\n      label: '?',\n      cssClass: 'question',\n      gridArea: posToGrid(question.string, question.fret)\n    })\n  }\n  else {\n    noteIndicators = allNotes;\n  }\n\n  const handleSubmit = event => {\n    if (letterEquals(question.answer, answer)) {\n      setQuestion(computeRandomQuestion());\n      \n      setJudgement({\n        correct: true,\n        id: Date.now()\n      });\n    }\n    else {\n      setJudgement({\n        correct: false,\n        id: Date.now()\n      });\n    }\n\n    setAnswer('');\n\n    event.preventDefault();\n  };\n\n  const handleTuningChanged = (e) => {\n    setTuning(TUNINGS.find(tuning => tuning.name === e.target.value) || tuning);\n  }\n\n  const toggleGuitarString = toToggle => {\n    let value = [...includedStrings];\n    value[toToggle] = !value[toToggle];\n    setIncludedStrings(value);\n\n    if (question.string.num === toToggle) {\n      setQuestion(computeRandomQuestion(value));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Guitar Quiz\n\n        <div className=\"App-options\">\n          <label>\n            <input\n              type=\"radio\"\n              value=\"explore\"\n              checked={appMode === 'explore'}\n              onChange={() => setAppMode('explore')}\n            />\n              Explore\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"quiz\"\n              checked={appMode === 'quiz'}\n              onChange={() => setAppMode('quiz')}\n            />\n            Quiz\n          </label>\n        </div>\n\n        <select\n          value={tuning.name}\n          onChange={handleTuningChanged}\n        >\n          { TUNINGS.map((tuning, i) => <option key={i}>{tuning.name}</option>)}\n        </select>\n        \n      </header>\n      <div\n        className=\"App-fretboard\"\n        style={{\n          gridTemplateColumns: `${ bridgeSize }px ${ frets.map(f => f.size + 'fr').join(' ') }`,\n          gridTemplateRows: 'auto ' + strings.map(() => '1fr').join(' ') + ' auto'\n        }}\n      >\n        <div\n          className=\"bridge\"\n          style={{\n            gridArea: `2 / 1 / -1 / 2`\n          }}\n        >\n        </div>\n        <div\n          className=\"fingerboard\"\n          style={{\n            gridArea: `2 / 2 / -1 / -1`\n          }}\n        ></div>\n\n        {\n          noteIndicators.map(({gridArea, label, cssClass}, i) =>\n            <div\n              key={i}\n              className={'note ' + cssClass}\n              style={{ gridArea }}\n            >\n              { label }\n            </div>\n           )\n        }\n\n        {\n          frets.map((fret, i) =>\n            <Fret key={i} {...fret}></Fret>\n          )\n        }\n        \n        {\n          strings.map((str, i ) =>\n            <GuitarString\n              key={i}\n              onToggle={() => toggleGuitarString(i)}\n              includeInQuiz={includedStrings[i]}\n              {...str}\n            ></GuitarString>\n          )\n        }\n      </div>\n\n      {\n        appMode === 'quiz' ? <form \n          className=\"App-question\"\n          onSubmit={event => handleSubmit(event)}\n        >\n          <h1>What is the higlighted note?</h1>\n          <input\n            className=\"App-answer-field\"\n            type=\"text\"\n            value={answer}\n            onChange={event => setAnswer(event.target.value)}\n          />\n          {\n            judgement ?\n              <div\n                className={'App-judgement ' + (judgement.correct ? 'correct' : 'incorrect') }\n                key={judgement.id}\n              >\n                { judgement.correct ? 'Correct' : 'Incorrect' }\n              </div> : null\n          }\n      </form> : null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","export function newBoolArray(len, val = true) {\n  const result = [];\n\n  for (let i = 0; i  < len; i++) {\n    result.push(val);\n  }\n\n  return result;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}