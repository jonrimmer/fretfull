{"version":3,"sources":["Fret.js","const.js","GuitarString.js","App.js","serviceWorker.js","index.js"],"names":["Fret","_ref","style","dots","react_default","a","createElement","className","Fragment","noteNames","GuitarString","includeInQuiz","rootNote","num","onToggle","key","onClick","gridArea","concat","DEFAULT_TUNING","positionToNote","string","fret","getRandomInt","max","Math","floor","random","computeRandomQuestion","strings","frets","filter","s","length","fretNum","type","answer","position","posToGrid","App","useMemo","fretCount","remainingSize","i","size","computeFrets","_useState","useState","_useState2","Object","slicedToArray","tuning","_useState3","height","borderBottom","round","computeStrings","_useState4","setStrings","_useState5","_useState6","showAllNotes","setShowAllNotes","_useState7","_useState8","judgement","setJudgement","allFrettedNotes","result","f","push","name","_useState9","_useState10","setAnswer","_useState11","_useState12","question","setQuestion","checked","onChange","event","target","gridTemplateColumns","map","join","gridTemplateRows","note","assign","str","newStrings","objectSpread","onSubmit","some","value","correct","id","Date","now","preventDefault","handleSubmit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.107e593f.chunk.js","sourcesContent":["import React from 'react';\n\nexport const computeFrets = (fretCount) => {\n  const frets = [];\n  let remainingSize = 200;\n\n  for (let i = 0; i < fretCount; i++) {\n    const size = remainingSize / 17.817;\n    remainingSize = remainingSize - size;\n  \n    frets[i] = {\n      size: size,\n      style: {\n        gridArea: `1 / ${ i + 2 } / -1 / ${ i + 2 }`\n      },\n      dots: 0\n    }\n  \n    if (i === 2 || i === 4 || i === 6 || i === 8) {\n      frets[i].dots = 1;\n    }\n    else if (i === 11) {\n      frets[i].dots = 2;\n    }\n  }\n\n  return frets;\n}\n\nexport default ({style, dots}) =>\n  <div\n    className=\"fret\"\n    style={ style }\n  >\n    {\n      dots === 1 ? <span className=\"dot single\"></span> : null\n    }\n    {\n      dots === 2 ? <>\n        <span className=\"dot double1\"></span><span className=\"dot double2\"></span>\n      </> : null\n    }\n  </div>;","export const noteNames = [\n  /*  0 */ ['A'],\n  /*  1 */ ['A#', 'Bb'],\n  /*  2 */ ['B'],\n  /*  3 */ ['C'],\n  /*  4 */ ['C#', 'Db'],\n  /*  5 */ ['D'],\n  /*  6 */ ['D#', 'Eb'],\n  /*  7 */ ['E'],\n  /*  8 */ ['F'],\n  /*  9 */ ['F#', 'Gb'],\n  /* 10 */ ['G'],\n  /* 11 */ ['G#', 'Ab']\n];\n","import React from 'react';\nimport { noteNames } from './const';\n\nconst MAX_STRING_WIDTH = 3;\n\nexport const computeStrings = (tuning) => {\n  const strings = [];\n\n  for (let i = 0; i < tuning.length; i++) {\n    strings[i] = {\n      rootNote: tuning[i],\n      includeInQuiz: true,\n      num: i,\n      style: {\n        gridArea: `${ i + 1 } / 1 / ${ i + 1 } / -1`,\n        height: '50%',\n        borderBottom: `${ Math.max(1, Math.round(((i + 1) / tuning.length) * MAX_STRING_WIDTH)) }px solid yellow`\n      }\n    }\n  }\n\n  return strings;\n}\n\nexport default ({includeInQuiz, rootNote, num, style, onToggle }) => {\n  return <>\n    <div\n      key={ num }\n      onClick={onToggle}\n      className={'note root-note ' + (includeInQuiz ? 'included' : 'excluded')}\n      style={{\n        gridArea: `${ num + 1 } / 1`\n      }}\n    >{ noteNames[rootNote][0] }</div>\n    <div\n      className=\"string\"\n      style = { style }\n    ></div>\n  </>\n}","import React, { useState, useMemo } from 'react';\nimport Fret, { computeFrets} from './Fret';\nimport GuitarString, { computeStrings } from './GuitarString';\nimport { noteNames } from './const';\nimport './App.css';\n\nconst bridgeSize = 100;\n\nconst DEFAULT_TUNING = [\n  7,  // E\n  2,  // B\n  10, // G\n  5,  // D\n  0,  // A\n  7,  // E\n];\n\nconst positionToNote = (string, fret) => {\n  return noteNames[(string.rootNote + fret) % 12];\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nconst computeRandomQuestion = (strings, frets) => {\n  strings = strings.filter(s => s.includeInQuiz);\n  const strNum = getRandomInt(strings.length);\n  const string = strings[strNum];\n  const fretNum = getRandomInt(frets.length);\n\n  return {\n    type: 'note',\n    answer: positionToNote(string, fretNum),\n    position: {\n      string: string.num,\n      fret: fretNum\n    }\n  };\n}\n\nconst posToGrid = ({string, fret}) => (string + 1) + ' / ' + (fret + 1);\n\nconst App = () => {\n  const frets = useMemo(() => computeFrets(12), []);\n  const [tuning, setTuning] = useState(DEFAULT_TUNING);\n  const [strings, setStrings] = useState(useMemo(() => computeStrings(tuning), [tuning]));\n  const [showAllNotes, setShowAllNotes] = useState(true);\n  const [judgement, setJudgement] = useState(null);\n\n  const allFrettedNotes = useMemo(() => {\n    const result = [];\n\n    for (let s = 0; s < strings.length; s++) {\n      for (let f = 0; f < frets.length + 1; f++) {\n        result.push({\n          position: {\n            string: s,\n            fret: f\n          },\n          name: positionToNote(strings[s], f)[0]\n        })\n      }\n    }\n\n    return result;\n  }, [tuning]);\n\n  const [answer, setAnswer] = useState('');\n  const [question, setQuestion] = useState(() => \n    computeRandomQuestion(strings, frets)\n  );\n\n  const toggleShowAllNotes = (event) => {\n    setShowAllNotes(event.target.checked);\n  }\n\n  const handleSubmit = event => {\n    if (question.answer.some(value => value === answer)) {\n      setQuestion(computeRandomQuestion(strings, frets));\n      \n      setJudgement({\n        correct: true,\n        id: Date.now()\n      });\n    }\n    else {\n      setJudgement({\n        correct: false,\n        id: Date.now()\n      });\n    }\n\n    setAnswer('');\n\n    event.preventDefault();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Guitar Quiz\n        \n        <label>\n          <input\n            type=\"checkbox\"\n            checked={showAllNotes}\n            onChange={toggleShowAllNotes}\n          />\n          Show all notes\n        </label>\n      </header>\n      <div\n        className=\"App-fretboard\"\n        style={{\n          gridTemplateColumns: `${ bridgeSize }px ${ frets.map(f => f.size + 'fr').join(' ') }`,\n          gridTemplateRows: strings.map(() => '1fr').join(' ')\n        }}\n      >\n        <div\n          className=\"bridge\"\n          style={{\n            gridArea: `1 / 1 / -1 / 2`\n          }}\n        >\n        </div>\n\n        <div\n          className=\"note question-note\"\n          style={{\n            gridArea: posToGrid(question.position)\n          }}\n        >?</div>\n\n        {\n          showAllNotes ? allFrettedNotes.map((note, i) =>\n            <div\n              key={i}\n              className=\"note indicator-note\"\n              style={{\n              gridArea: posToGrid(note.position)\n              }}\n            >\n              { note.name }\n            </div>\n           ) : null\n        }\n\n        {\n          frets.map((fret, i) =>\n            <Fret key={i} {...fret}></Fret>\n          )\n        }\n        \n        {\n          strings.map((str, i ) =>\n            <>\n              <GuitarString\n                key={i}\n                onToggle={() => {\n                  let newStrings = strings.map(s => ({\n                    ...s,\n                    includeInQuiz: s == str ? !s.includeInQuiz : s.includeInQuiz\n                  }));\n\n                  setStrings(newStrings);\n                  setQuestion(computeRandomQuestion(newStrings, frets));\n                }}\n                {...str}\n              ></GuitarString>\n            </>\n          )\n        }\n      </div>\n\n      <form className=\"App-question\"\n        onSubmit={event => handleSubmit(event)}\n      >\n        <h1>What is the higlighted note?</h1>\n        <input\n          className=\"App-answer-field\"\n          type=\"text\"\n          value={answer}\n          onChange={event => setAnswer(event.target.value)}\n        />\n        {\n          judgement ?\n            <div\n              className={'App-judgement ' + (judgement.correct ? 'correct' : 'incorrect') }\n              key={judgement.id}\n            >\n              { judgement.correct ? 'Correct' : 'Incorrect' }\n            </div> : null\n        }\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}